
AHT-10_STM32_BLUEPILL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003980  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003a8c  08003a8c  00004a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b84  08003b84  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b84  08003b84  00004b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b8c  08003b8c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b8c  08003b8c  00004b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b90  08003b90  00004b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b94  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08003bf0  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003bf0  00005264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091f5  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000163a  00000000  00000000  0000e27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0000f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000709  00000000  00000000  000101b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038a2  00000000  00000000  000108b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4ea  00000000  00000000  0001415b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084802  00000000  00000000  0001f645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3e47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac0  00000000  00000000  000a3e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000a694c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a74 	.word	0x08003a74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003a74 	.word	0x08003a74

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b0a3      	sub	sp, #140	@ 0x8c
 8000668:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f000 fbe5 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f8b9 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 f955 	bl	8000920 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000676:	f000 f8fb 	bl	8000870 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800067a:	f000 f927 	bl	80008cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char msg[100];
  float temperature, humidity;

  sprintf(msg, "AHT10 Sensor Test Starting...\r\n");
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	4952      	ldr	r1, [pc, #328]	@ (80007cc <main+0x168>)
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fdf3 	bl	8003270 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fd5c 	bl	800014c <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	f107 010c 	add.w	r1, r7, #12
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	484b      	ldr	r0, [pc, #300]	@ (80007d0 <main+0x16c>)
 80006a2:	f002 fb63 	bl	8002d6c <HAL_UART_Transmit>

  // Initialize AHT10
  if (AHT10_Init() != HAL_OK) {
 80006a6:	f000 f9a9 	bl	80009fc <AHT10_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d013      	beq.n	80006d8 <main+0x74>
	  sprintf(msg, "AHT10 Initialization Failed!\r\n");
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4947      	ldr	r1, [pc, #284]	@ (80007d4 <main+0x170>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fdda 	bl	8003270 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fd43 	bl	800014c <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	f107 010c 	add.w	r1, r7, #12
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	483f      	ldr	r0, [pc, #252]	@ (80007d0 <main+0x16c>)
 80006d4:	f002 fb4a 	bl	8002d6c <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Trigger measurement
	      if (AHT10_Trigger_Measurement() == HAL_OK) {
 80006d8:	f000 f9da 	bl	8000a90 <AHT10_Trigger_Measurement>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d16e      	bne.n	80007c0 <main+0x15c>
	          HAL_Delay(80); // Wait for measurement to complete
 80006e2:	2050      	movs	r0, #80	@ 0x50
 80006e4:	f000 fc0a 	bl	8000efc <HAL_Delay>

	          // Read temperature and humidity
	          if (AHT10_Read_Data(&temperature, &humidity) == HAL_OK) {
 80006e8:	1d3a      	adds	r2, r7, #4
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4611      	mov	r1, r2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f9eb 	bl	8000acc <AHT10_Read_Data>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d14d      	bne.n	8000798 <main+0x134>
	              // Convert float to integers for display (avoid float formatting)
	              int temp_int = (int)temperature;
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff8a 	bl	8000618 <__aeabi_f2iz>
 8000704:	4603      	mov	r3, r0
 8000706:	67fb      	str	r3, [r7, #124]	@ 0x7c
	              int temp_dec = (int)((temperature - temp_int) * 100);
 8000708:	68bc      	ldr	r4, [r7, #8]
 800070a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800070c:	f7ff fde0 	bl	80002d0 <__aeabi_i2f>
 8000710:	4603      	mov	r3, r0
 8000712:	4619      	mov	r1, r3
 8000714:	4620      	mov	r0, r4
 8000716:	f7ff fd25 	bl	8000164 <__aeabi_fsub>
 800071a:	4603      	mov	r3, r0
 800071c:	492e      	ldr	r1, [pc, #184]	@ (80007d8 <main+0x174>)
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fe2a 	bl	8000378 <__aeabi_fmul>
 8000724:	4603      	mov	r3, r0
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff76 	bl	8000618 <__aeabi_f2iz>
 800072c:	4603      	mov	r3, r0
 800072e:	67bb      	str	r3, [r7, #120]	@ 0x78
	              int hum_int = (int)humidity;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff70 	bl	8000618 <__aeabi_f2iz>
 8000738:	4603      	mov	r3, r0
 800073a:	677b      	str	r3, [r7, #116]	@ 0x74
	              int hum_dec = (int)((humidity - hum_int) * 100);
 800073c:	687c      	ldr	r4, [r7, #4]
 800073e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000740:	f7ff fdc6 	bl	80002d0 <__aeabi_i2f>
 8000744:	4603      	mov	r3, r0
 8000746:	4619      	mov	r1, r3
 8000748:	4620      	mov	r0, r4
 800074a:	f7ff fd0b 	bl	8000164 <__aeabi_fsub>
 800074e:	4603      	mov	r3, r0
 8000750:	4921      	ldr	r1, [pc, #132]	@ (80007d8 <main+0x174>)
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe10 	bl	8000378 <__aeabi_fmul>
 8000758:	4603      	mov	r3, r0
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff5c 	bl	8000618 <__aeabi_f2iz>
 8000760:	4603      	mov	r3, r0
 8000762:	673b      	str	r3, [r7, #112]	@ 0x70

	              sprintf(msg, "Temperature: %d.%02dC, Humidity: %d.%02d%%\r\n",
 8000764:	f107 000c 	add.w	r0, r7, #12
 8000768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000772:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000774:	4919      	ldr	r1, [pc, #100]	@ (80007dc <main+0x178>)
 8000776:	f002 fd7b 	bl	8003270 <siprintf>
	                     temp_int, temp_dec, hum_int, hum_dec);
	              HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fce4 	bl	800014c <strlen>
 8000784:	4603      	mov	r3, r0
 8000786:	b29a      	uxth	r2, r3
 8000788:	f107 010c 	add.w	r1, r7, #12
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	480f      	ldr	r0, [pc, #60]	@ (80007d0 <main+0x16c>)
 8000792:	f002 faeb 	bl	8002d6c <HAL_UART_Transmit>
 8000796:	e013      	b.n	80007c0 <main+0x15c>
	          } else {
	              sprintf(msg, "Failed to read sensor data!\r\n");
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4910      	ldr	r1, [pc, #64]	@ (80007e0 <main+0x17c>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fd66 	bl	8003270 <siprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fccf 	bl	800014c <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	f107 010c 	add.w	r1, r7, #12
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <main+0x16c>)
 80007bc:	f002 fad6 	bl	8002d6c <HAL_UART_Transmit>
	          }
	      }
	  HAL_Delay(2000); // Read every 2 seconds
 80007c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007c4:	f000 fb9a 	bl	8000efc <HAL_Delay>
	      if (AHT10_Trigger_Measurement() == HAL_OK) {
 80007c8:	e786      	b.n	80006d8 <main+0x74>
 80007ca:	bf00      	nop
 80007cc:	08003a8c 	.word	0x08003a8c
 80007d0:	200000cc 	.word	0x200000cc
 80007d4:	08003aac 	.word	0x08003aac
 80007d8:	42c80000 	.word	0x42c80000
 80007dc:	08003acc 	.word	0x08003acc
 80007e0:	08003afc 	.word	0x08003afc

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b090      	sub	sp, #64	@ 0x40
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	2228      	movs	r2, #40	@ 0x28
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fd5e 	bl	80032b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000820:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000822:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fe3d 	bl	80024ac <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000838:	f000 f9ae 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2102      	movs	r1, #2
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f8aa 	bl	80029b0 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000862:	f000 f999 	bl	8000b98 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3740      	adds	r7, #64	@ 0x40
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	@ (80008c4 <MX_I2C1_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C1_Init+0x50>)
 800087c:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <MX_I2C1_Init+0x58>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_I2C1_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_I2C1_Init+0x50>)
 80008ae:	f000 fdc9 	bl	8001444 <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 f96e 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000078 	.word	0x20000078
 80008c4:	40005400 	.word	0x40005400
 80008c8:	000186a0 	.word	0x000186a0

080008cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_USART1_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	@ (800091c <MX_USART1_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_USART1_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_USART1_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_USART1_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_USART1_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_USART1_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_USART1_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_USART1_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_USART1_UART_Init+0x4c>)
 8000904:	f002 f9e2 	bl	8002ccc <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 f943 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000cc 	.word	0x200000cc
 800091c:	40013800 	.word	0x40013800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000934:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a2d      	ldr	r2, [pc, #180]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b2b      	ldr	r3, [pc, #172]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0310 	and.w	r3, r3, #16
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a27      	ldr	r2, [pc, #156]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000952:	f043 0320 	orr.w	r3, r3, #32
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0320 	and.w	r3, r3, #32
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a21      	ldr	r2, [pc, #132]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a1b      	ldr	r2, [pc, #108]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_GPIO_Init+0xd0>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800099a:	4816      	ldr	r0, [pc, #88]	@ (80009f4 <MX_GPIO_Init+0xd4>)
 800099c:	f000 fd3a 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009a6:	4814      	ldr	r0, [pc, #80]	@ (80009f8 <MX_GPIO_Init+0xd8>)
 80009a8:	f000 fd34 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4619      	mov	r1, r3
 80009c4:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <MX_GPIO_Init+0xd4>)
 80009c6:	f000 fba1 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2302      	movs	r3, #2
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_GPIO_Init+0xd8>)
 80009e4:	f000 fb92 	bl	800110c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40011000 	.word	0x40011000
 80009f8:	40010c00 	.word	0x40010c00

080009fc <AHT10_Init>:

/* USER CODE BEGIN 4 */
// AHT10 Initialization
uint8_t AHT10_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af02      	add	r7, sp, #8
    uint8_t init_cmd[3] = {AHT10_INIT_CMD, 0x08, 0x00};
 8000a02:	4a16      	ldr	r2, [pc, #88]	@ (8000a5c <AHT10_Init+0x60>)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	4611      	mov	r1, r2
 8000a0a:	8019      	strh	r1, [r3, #0]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	0c12      	lsrs	r2, r2, #16
 8000a10:	701a      	strb	r2, [r3, #0]

    // Wait after power-on
    HAL_Delay(40);
 8000a12:	2028      	movs	r0, #40	@ 0x28
 8000a14:	f000 fa72 	bl	8000efc <HAL_Delay>

    // Send initialization command
    if (HAL_I2C_Master_Transmit(&hi2c1, AHT10_ADDRESS, init_cmd, 3, 1000) != HAL_OK) {
 8000a18:	1d3a      	adds	r2, r7, #4
 8000a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2303      	movs	r3, #3
 8000a22:	2170      	movs	r1, #112	@ 0x70
 8000a24:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <AHT10_Init+0x64>)
 8000a26:	f000 fe51 	bl	80016cc <HAL_I2C_Master_Transmit>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <AHT10_Init+0x38>
        return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e00e      	b.n	8000a52 <AHT10_Init+0x56>
    }

    HAL_Delay(10);
 8000a34:	200a      	movs	r0, #10
 8000a36:	f000 fa61 	bl	8000efc <HAL_Delay>

    // Check if calibration bit is set
    uint8_t status = AHT10_Read_Status();
 8000a3a:	f000 f813 	bl	8000a64 <AHT10_Read_Status>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
    if ((status & AHT10_STATUS_CAL) == 0) {
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d101      	bne.n	8000a50 <AHT10_Init+0x54>
        return HAL_ERROR; // Calibration failed
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <AHT10_Init+0x56>
    }

    return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	08003b1c 	.word	0x08003b1c
 8000a60:	20000078 	.word	0x20000078

08000a64 <AHT10_Read_Status>:

// Read AHT10 status register
uint8_t AHT10_Read_Status(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af02      	add	r7, sp, #8
    uint8_t status = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Receive(&hi2c1, AHT10_ADDRESS, &status, 1, 1000);
 8000a6e:	1dfa      	adds	r2, r7, #7
 8000a70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2301      	movs	r3, #1
 8000a78:	2170      	movs	r1, #112	@ 0x70
 8000a7a:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <AHT10_Read_Status+0x28>)
 8000a7c:	f000 ff24 	bl	80018c8 <HAL_I2C_Master_Receive>
    return status;
 8000a80:	79fb      	ldrb	r3, [r7, #7]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000078 	.word	0x20000078

08000a90 <AHT10_Trigger_Measurement>:

// Trigger measurement
uint8_t AHT10_Trigger_Measurement(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af02      	add	r7, sp, #8
    uint8_t measure_cmd[3] = {AHT10_MEASURE_CMD, 0x33, 0x00};
 8000a96:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <AHT10_Trigger_Measurement+0x34>)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	8019      	strh	r1, [r3, #0]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	0c12      	lsrs	r2, r2, #16
 8000aa4:	701a      	strb	r2, [r3, #0]

    return HAL_I2C_Master_Transmit(&hi2c1, AHT10_ADDRESS, measure_cmd, 3, 1000);
 8000aa6:	1d3a      	adds	r2, r7, #4
 8000aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2303      	movs	r3, #3
 8000ab0:	2170      	movs	r1, #112	@ 0x70
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <AHT10_Trigger_Measurement+0x38>)
 8000ab4:	f000 fe0a 	bl	80016cc <HAL_I2C_Master_Transmit>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	08003b20 	.word	0x08003b20
 8000ac8:	20000078 	.word	0x20000078

08000acc <AHT10_Read_Data>:

// Read temperature and humidity data
uint8_t AHT10_Read_Data(float *temperature, float *humidity)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint32_t raw_humidity, raw_temperature;

    // Check if sensor is busy
    if (AHT10_Read_Status() & AHT10_STATUS_BUSY) {
 8000ad6:	f7ff ffc5 	bl	8000a64 <AHT10_Read_Status>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da01      	bge.n	8000ae6 <AHT10_Read_Data+0x1a>
        return HAL_ERROR; // Sensor still measuring
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e04c      	b.n	8000b80 <AHT10_Read_Data+0xb4>
    }

    // Read 6 bytes of data
    if (HAL_I2C_Master_Receive(&hi2c1, AHT10_ADDRESS, data, 6, 1000) != HAL_OK) {
 8000ae6:	f107 0208 	add.w	r2, r7, #8
 8000aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2306      	movs	r3, #6
 8000af2:	2170      	movs	r1, #112	@ 0x70
 8000af4:	4824      	ldr	r0, [pc, #144]	@ (8000b88 <AHT10_Read_Data+0xbc>)
 8000af6:	f000 fee7 	bl	80018c8 <HAL_I2C_Master_Receive>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <AHT10_Read_Data+0x38>
        return HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e03d      	b.n	8000b80 <AHT10_Read_Data+0xb4>
    }

    // Extract raw humidity (20 bits)
    raw_humidity = ((uint32_t)data[1] << 12) | ((uint32_t)data[2] << 4) | (data[3] >> 4);
 8000b04:	7a7b      	ldrb	r3, [r7, #9]
 8000b06:	031a      	lsls	r2, r3, #12
 8000b08:	7abb      	ldrb	r3, [r7, #10]
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	7afa      	ldrb	r2, [r7, #11]
 8000b10:	0912      	lsrs	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	4313      	orrs	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]

    // Extract raw temperature (20 bits)
    raw_temperature = (((uint32_t)data[3] & 0x0F) << 16) | ((uint32_t)data[4] << 8) | data[5];
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	041b      	lsls	r3, r3, #16
 8000b1c:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8000b20:	7b3b      	ldrb	r3, [r7, #12]
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	4313      	orrs	r3, r2
 8000b26:	7b7a      	ldrb	r2, [r7, #13]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]

    // Convert to actual values
    *humidity = (float)raw_humidity * 100.0f / 1048576.0f; // 2^20 = 1048576
 8000b2c:	6978      	ldr	r0, [r7, #20]
 8000b2e:	f7ff fbcb 	bl	80002c8 <__aeabi_ui2f>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4915      	ldr	r1, [pc, #84]	@ (8000b8c <AHT10_Read_Data+0xc0>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fc1e 	bl	8000378 <__aeabi_fmul>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fccc 	bl	80004e0 <__aeabi_fdiv>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	601a      	str	r2, [r3, #0]
    *temperature = (float)raw_temperature * 200.0f / 1048576.0f - 50.0f;
 8000b50:	6938      	ldr	r0, [r7, #16]
 8000b52:	f7ff fbb9 	bl	80002c8 <__aeabi_ui2f>
 8000b56:	4603      	mov	r3, r0
 8000b58:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <AHT10_Read_Data+0xc4>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fc0c 	bl	8000378 <__aeabi_fmul>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fcba 	bl	80004e0 <__aeabi_fdiv>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4909      	ldr	r1, [pc, #36]	@ (8000b94 <AHT10_Read_Data+0xc8>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff faf7 	bl	8000164 <__aeabi_fsub>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000078 	.word	0x20000078
 8000b8c:	42c80000 	.word	0x42c80000
 8000b90:	43480000 	.word	0x43480000
 8000b94:	42480000 	.word	0x42480000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <Error_Handler+0x8>

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a14      	ldr	r2, [pc, #80]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <HAL_MspInit+0x60>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <HAL_MspInit+0x60>)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000

08000c08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a15      	ldr	r2, [pc, #84]	@ (8000c78 <HAL_I2C_MspInit+0x70>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d123      	bne.n	8000c70 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <HAL_I2C_MspInit+0x74>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a13      	ldr	r2, [pc, #76]	@ (8000c7c <HAL_I2C_MspInit+0x74>)
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_I2C_MspInit+0x74>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c40:	23c0      	movs	r3, #192	@ 0xc0
 8000c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c44:	2312      	movs	r3, #18
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <HAL_I2C_MspInit+0x78>)
 8000c54:	f000 fa5a 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_I2C_MspInit+0x74>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_I2C_MspInit+0x74>)
 8000c5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c62:	61d3      	str	r3, [r2, #28]
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_I2C_MspInit+0x74>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <HAL_UART_MspInit+0x8c>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d131      	bne.n	8000d08 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000caa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <HAL_UART_MspInit+0x94>)
 8000cea:	f000 fa0f 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_UART_MspInit+0x94>)
 8000d04:	f000 fa02 	bl	800110c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40013800 	.word	0x40013800
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <NMI_Handler+0x4>

08000d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <MemManage_Handler+0x4>

08000d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f8aa 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f002 fa9e 	bl	80032e4 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20005000 	.word	0x20005000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	20000114 	.word	0x20000114
 8000ddc:	20000268 	.word	0x20000268

08000de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dec:	f7ff fff8 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480b      	ldr	r0, [pc, #44]	@ (8000e20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000df2:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000df4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e08:	4c09      	ldr	r4, [pc, #36]	@ (8000e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f002 fa6b 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1a:	f7ff fc23 	bl	8000664 <main>
  bx lr
 8000e1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e28:	08003b94 	.word	0x08003b94
  ldr r2, =_sbss
 8000e2c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e30:	20000264 	.word	0x20000264

08000e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC1_2_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <HAL_Init+0x28>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	@ (8000e60 <HAL_Init+0x28>)
 8000e42:	f043 0310 	orr.w	r3, r3, #16
 8000e46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f92b 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fea6 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f935 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f90b 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <HAL_IncTick+0x1c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <HAL_IncTick+0x20>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a03      	ldr	r2, [pc, #12]	@ (8000ee4 <HAL_IncTick+0x20>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000118 	.word	0x20000118

08000ee8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b02      	ldr	r3, [pc, #8]	@ (8000ef8 <HAL_GetTick+0x10>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000118 	.word	0x20000118

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff fff0 	bl	8000ee8 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffe0 	bl	8000ee8 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	@ (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	@ (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	@ 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	@ 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff90 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff49 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff5e 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb0 	bl	8001060 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b08b      	sub	sp, #44	@ 0x2c
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e169      	b.n	80013f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001120:	2201      	movs	r2, #1
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 8158 	bne.w	80013ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a9a      	ldr	r2, [pc, #616]	@ (80013ac <HAL_GPIO_Init+0x2a0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d05e      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
 8001148:	4a98      	ldr	r2, [pc, #608]	@ (80013ac <HAL_GPIO_Init+0x2a0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d875      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 800114e:	4a98      	ldr	r2, [pc, #608]	@ (80013b0 <HAL_GPIO_Init+0x2a4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d058      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
 8001154:	4a96      	ldr	r2, [pc, #600]	@ (80013b0 <HAL_GPIO_Init+0x2a4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d86f      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 800115a:	4a96      	ldr	r2, [pc, #600]	@ (80013b4 <HAL_GPIO_Init+0x2a8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d052      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
 8001160:	4a94      	ldr	r2, [pc, #592]	@ (80013b4 <HAL_GPIO_Init+0x2a8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d869      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 8001166:	4a94      	ldr	r2, [pc, #592]	@ (80013b8 <HAL_GPIO_Init+0x2ac>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d04c      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
 800116c:	4a92      	ldr	r2, [pc, #584]	@ (80013b8 <HAL_GPIO_Init+0x2ac>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d863      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 8001172:	4a92      	ldr	r2, [pc, #584]	@ (80013bc <HAL_GPIO_Init+0x2b0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d046      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
 8001178:	4a90      	ldr	r2, [pc, #576]	@ (80013bc <HAL_GPIO_Init+0x2b0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d85d      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 800117e:	2b12      	cmp	r3, #18
 8001180:	d82a      	bhi.n	80011d8 <HAL_GPIO_Init+0xcc>
 8001182:	2b12      	cmp	r3, #18
 8001184:	d859      	bhi.n	800123a <HAL_GPIO_Init+0x12e>
 8001186:	a201      	add	r2, pc, #4	@ (adr r2, 800118c <HAL_GPIO_Init+0x80>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	08001207 	.word	0x08001207
 8001190:	080011e1 	.word	0x080011e1
 8001194:	080011f3 	.word	0x080011f3
 8001198:	08001235 	.word	0x08001235
 800119c:	0800123b 	.word	0x0800123b
 80011a0:	0800123b 	.word	0x0800123b
 80011a4:	0800123b 	.word	0x0800123b
 80011a8:	0800123b 	.word	0x0800123b
 80011ac:	0800123b 	.word	0x0800123b
 80011b0:	0800123b 	.word	0x0800123b
 80011b4:	0800123b 	.word	0x0800123b
 80011b8:	0800123b 	.word	0x0800123b
 80011bc:	0800123b 	.word	0x0800123b
 80011c0:	0800123b 	.word	0x0800123b
 80011c4:	0800123b 	.word	0x0800123b
 80011c8:	0800123b 	.word	0x0800123b
 80011cc:	0800123b 	.word	0x0800123b
 80011d0:	080011e9 	.word	0x080011e9
 80011d4:	080011fd 	.word	0x080011fd
 80011d8:	4a79      	ldr	r2, [pc, #484]	@ (80013c0 <HAL_GPIO_Init+0x2b4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011de:	e02c      	b.n	800123a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e029      	b.n	800123c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	3304      	adds	r3, #4
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e024      	b.n	800123c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	3308      	adds	r3, #8
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e01f      	b.n	800123c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	330c      	adds	r3, #12
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e01a      	b.n	800123c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800120e:	2304      	movs	r3, #4
 8001210:	623b      	str	r3, [r7, #32]
          break;
 8001212:	e013      	b.n	800123c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d105      	bne.n	8001228 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800121c:	2308      	movs	r3, #8
 800121e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	611a      	str	r2, [r3, #16]
          break;
 8001226:	e009      	b.n	800123c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001228:	2308      	movs	r3, #8
 800122a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	615a      	str	r2, [r3, #20]
          break;
 8001232:	e003      	b.n	800123c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
          break;
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x130>
          break;
 800123a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2bff      	cmp	r3, #255	@ 0xff
 8001240:	d801      	bhi.n	8001246 <HAL_GPIO_Init+0x13a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	e001      	b.n	800124a <HAL_GPIO_Init+0x13e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3304      	adds	r3, #4
 800124a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2bff      	cmp	r3, #255	@ 0xff
 8001250:	d802      	bhi.n	8001258 <HAL_GPIO_Init+0x14c>
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x152>
 8001258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125a:	3b08      	subs	r3, #8
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	210f      	movs	r1, #15
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	401a      	ands	r2, r3
 8001270:	6a39      	ldr	r1, [r7, #32]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	431a      	orrs	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 80b1 	beq.w	80013ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800128c:	4b4d      	ldr	r3, [pc, #308]	@ (80013c4 <HAL_GPIO_Init+0x2b8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a4c      	ldr	r2, [pc, #304]	@ (80013c4 <HAL_GPIO_Init+0x2b8>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b4a      	ldr	r3, [pc, #296]	@ (80013c4 <HAL_GPIO_Init+0x2b8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012a4:	4a48      	ldr	r2, [pc, #288]	@ (80013c8 <HAL_GPIO_Init+0x2bc>)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	220f      	movs	r2, #15
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	4013      	ands	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a40      	ldr	r2, [pc, #256]	@ (80013cc <HAL_GPIO_Init+0x2c0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d013      	beq.n	80012f8 <HAL_GPIO_Init+0x1ec>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3f      	ldr	r2, [pc, #252]	@ (80013d0 <HAL_GPIO_Init+0x2c4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d00d      	beq.n	80012f4 <HAL_GPIO_Init+0x1e8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a3e      	ldr	r2, [pc, #248]	@ (80013d4 <HAL_GPIO_Init+0x2c8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d007      	beq.n	80012f0 <HAL_GPIO_Init+0x1e4>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a3d      	ldr	r2, [pc, #244]	@ (80013d8 <HAL_GPIO_Init+0x2cc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d101      	bne.n	80012ec <HAL_GPIO_Init+0x1e0>
 80012e8:	2303      	movs	r3, #3
 80012ea:	e006      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e004      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e002      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012f8:	2300      	movs	r3, #0
 80012fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012fc:	f002 0203 	and.w	r2, r2, #3
 8001300:	0092      	lsls	r2, r2, #2
 8001302:	4093      	lsls	r3, r2
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800130a:	492f      	ldr	r1, [pc, #188]	@ (80013c8 <HAL_GPIO_Init+0x2bc>)
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001324:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	492c      	ldr	r1, [pc, #176]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001332:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	43db      	mvns	r3, r3
 800133a:	4928      	ldr	r1, [pc, #160]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 800133c:	4013      	ands	r3, r2
 800133e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800134c:	4b23      	ldr	r3, [pc, #140]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	4922      	ldr	r1, [pc, #136]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	60cb      	str	r3, [r1, #12]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800135a:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	491e      	ldr	r1, [pc, #120]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 8001364:	4013      	ands	r3, r2
 8001366:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4918      	ldr	r1, [pc, #96]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	43db      	mvns	r3, r3
 800138a:	4914      	ldr	r1, [pc, #80]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 800138c:	4013      	ands	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d021      	beq.n	80013e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	490e      	ldr	r1, [pc, #56]	@ (80013dc <HAL_GPIO_Init+0x2d0>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
 80013a8:	e021      	b.n	80013ee <HAL_GPIO_Init+0x2e2>
 80013aa:	bf00      	nop
 80013ac:	10320000 	.word	0x10320000
 80013b0:	10310000 	.word	0x10310000
 80013b4:	10220000 	.word	0x10220000
 80013b8:	10210000 	.word	0x10210000
 80013bc:	10120000 	.word	0x10120000
 80013c0:	10110000 	.word	0x10110000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40010800 	.word	0x40010800
 80013d0:	40010c00 	.word	0x40010c00
 80013d4:	40011000 	.word	0x40011000
 80013d8:	40011400 	.word	0x40011400
 80013dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_GPIO_Init+0x304>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	4909      	ldr	r1, [pc, #36]	@ (8001410 <HAL_GPIO_Init+0x304>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	3301      	adds	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f47f ae8e 	bne.w	8001120 <HAL_GPIO_Init+0x14>
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	372c      	adds	r7, #44	@ 0x2c
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001430:	e003      	b.n	800143a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	611a      	str	r2, [r3, #16]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e12b      	b.n	80016ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fbcc 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2224      	movs	r2, #36	@ 0x24
 8001474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001496:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a8:	f001 fbca 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 80014ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a81      	ldr	r2, [pc, #516]	@ (80016b8 <HAL_I2C_Init+0x274>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d807      	bhi.n	80014c8 <HAL_I2C_Init+0x84>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4a80      	ldr	r2, [pc, #512]	@ (80016bc <HAL_I2C_Init+0x278>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	bf94      	ite	ls
 80014c0:	2301      	movls	r3, #1
 80014c2:	2300      	movhi	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	e006      	b.n	80014d6 <HAL_I2C_Init+0x92>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4a7d      	ldr	r2, [pc, #500]	@ (80016c0 <HAL_I2C_Init+0x27c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	bf94      	ite	ls
 80014d0:	2301      	movls	r3, #1
 80014d2:	2300      	movhi	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0e7      	b.n	80016ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4a78      	ldr	r2, [pc, #480]	@ (80016c4 <HAL_I2C_Init+0x280>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	0c9b      	lsrs	r3, r3, #18
 80014e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a6a      	ldr	r2, [pc, #424]	@ (80016b8 <HAL_I2C_Init+0x274>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d802      	bhi.n	8001518 <HAL_I2C_Init+0xd4>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3301      	adds	r3, #1
 8001516:	e009      	b.n	800152c <HAL_I2C_Init+0xe8>
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	4a69      	ldr	r2, [pc, #420]	@ (80016c8 <HAL_I2C_Init+0x284>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	3301      	adds	r3, #1
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	430b      	orrs	r3, r1
 8001532:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800153e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	495c      	ldr	r1, [pc, #368]	@ (80016b8 <HAL_I2C_Init+0x274>)
 8001548:	428b      	cmp	r3, r1
 800154a:	d819      	bhi.n	8001580 <HAL_I2C_Init+0x13c>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1e59      	subs	r1, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	fbb1 f3f3 	udiv	r3, r1, r3
 800155a:	1c59      	adds	r1, r3, #1
 800155c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001560:	400b      	ands	r3, r1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00a      	beq.n	800157c <HAL_I2C_Init+0x138>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1e59      	subs	r1, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fbb1 f3f3 	udiv	r3, r1, r3
 8001574:	3301      	adds	r3, #1
 8001576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157a:	e051      	b.n	8001620 <HAL_I2C_Init+0x1dc>
 800157c:	2304      	movs	r3, #4
 800157e:	e04f      	b.n	8001620 <HAL_I2C_Init+0x1dc>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d111      	bne.n	80015ac <HAL_I2C_Init+0x168>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1e58      	subs	r0, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	440b      	add	r3, r1
 8001596:	fbb0 f3f3 	udiv	r3, r0, r3
 800159a:	3301      	adds	r3, #1
 800159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf0c      	ite	eq
 80015a4:	2301      	moveq	r3, #1
 80015a6:	2300      	movne	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	e012      	b.n	80015d2 <HAL_I2C_Init+0x18e>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1e58      	subs	r0, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	0099      	lsls	r1, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c2:	3301      	adds	r3, #1
 80015c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_I2C_Init+0x196>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e022      	b.n	8001620 <HAL_I2C_Init+0x1dc>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10e      	bne.n	8001600 <HAL_I2C_Init+0x1bc>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1e58      	subs	r0, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6859      	ldr	r1, [r3, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	440b      	add	r3, r1
 80015f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f4:	3301      	adds	r3, #1
 80015f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015fe:	e00f      	b.n	8001620 <HAL_I2C_Init+0x1dc>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1e58      	subs	r0, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	0099      	lsls	r1, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	fbb0 f3f3 	udiv	r3, r0, r3
 8001616:	3301      	adds	r3, #1
 8001618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	6809      	ldr	r1, [r1, #0]
 8001624:	4313      	orrs	r3, r2
 8001626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800164e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6911      	ldr	r1, [r2, #16]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68d2      	ldr	r2, [r2, #12]
 800165a:	4311      	orrs	r1, r2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	430b      	orrs	r3, r1
 8001662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2220      	movs	r2, #32
 800169a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	000186a0 	.word	0x000186a0
 80016bc:	001e847f 	.word	0x001e847f
 80016c0:	003d08ff 	.word	0x003d08ff
 80016c4:	431bde83 	.word	0x431bde83
 80016c8:	10624dd3 	.word	0x10624dd3

080016cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	461a      	mov	r2, r3
 80016d8:	460b      	mov	r3, r1
 80016da:	817b      	strh	r3, [r7, #10]
 80016dc:	4613      	mov	r3, r2
 80016de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016e0:	f7ff fc02 	bl	8000ee8 <HAL_GetTick>
 80016e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b20      	cmp	r3, #32
 80016f0:	f040 80e0 	bne.w	80018b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2319      	movs	r3, #25
 80016fa:	2201      	movs	r2, #1
 80016fc:	4970      	ldr	r1, [pc, #448]	@ (80018c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 fc9e 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800170a:	2302      	movs	r3, #2
 800170c:	e0d3      	b.n	80018b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_I2C_Master_Transmit+0x50>
 8001718:	2302      	movs	r3, #2
 800171a:	e0cc      	b.n	80018b6 <HAL_I2C_Master_Transmit+0x1ea>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d007      	beq.n	8001742 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001750:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2221      	movs	r2, #33	@ 0x21
 8001756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2210      	movs	r2, #16
 800175e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	893a      	ldrh	r2, [r7, #8]
 8001772:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4a50      	ldr	r2, [pc, #320]	@ (80018c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001782:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001784:	8979      	ldrh	r1, [r7, #10]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	6a3a      	ldr	r2, [r7, #32]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 fb08 	bl	8001da0 <I2C_MasterRequestWrite>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e08d      	b.n	80018b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017b0:	e066      	b.n	8001880 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	6a39      	ldr	r1, [r7, #32]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 fd5c 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00d      	beq.n	80017de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d107      	bne.n	80017da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06b      	b.n	80018b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b04      	cmp	r3, #4
 800181a:	d11b      	bne.n	8001854 <HAL_I2C_Master_Transmit+0x188>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d017      	beq.n	8001854 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	6a39      	ldr	r1, [r7, #32]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 fd53 	bl	8002304 <I2C_WaitOnBTFFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00d      	beq.n	8001880 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	2b04      	cmp	r3, #4
 800186a:	d107      	bne.n	800187c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e01a      	b.n	80018b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001884:	2b00      	cmp	r3, #0
 8001886:	d194      	bne.n	80017b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e000      	b.n	80018b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018b4:	2302      	movs	r3, #2
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	00100002 	.word	0x00100002
 80018c4:	ffff0000 	.word	0xffff0000

080018c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	@ 0x30
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	461a      	mov	r2, r3
 80018d4:	460b      	mov	r3, r1
 80018d6:	817b      	strh	r3, [r7, #10]
 80018d8:	4613      	mov	r3, r2
 80018da:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff fb02 	bl	8000ee8 <HAL_GetTick>
 80018e4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	f040 824b 	bne.w	8001d8a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2319      	movs	r3, #25
 80018fa:	2201      	movs	r2, #1
 80018fc:	497f      	ldr	r1, [pc, #508]	@ (8001afc <HAL_I2C_Master_Receive+0x234>)
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 fb9e 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800190a:	2302      	movs	r3, #2
 800190c:	e23e      	b.n	8001d8c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_I2C_Master_Receive+0x54>
 8001918:	2302      	movs	r3, #2
 800191a:	e237      	b.n	8001d8c <HAL_I2C_Master_Receive+0x4c4>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d007      	beq.n	8001942 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001950:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2222      	movs	r2, #34	@ 0x22
 8001956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2210      	movs	r2, #16
 800195e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	893a      	ldrh	r2, [r7, #8]
 8001972:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4a5f      	ldr	r2, [pc, #380]	@ (8001b00 <HAL_I2C_Master_Receive+0x238>)
 8001982:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001984:	8979      	ldrh	r1, [r7, #10]
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fa8a 	bl	8001ea4 <I2C_MasterRequestRead>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e1f8      	b.n	8001d8c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d113      	bne.n	80019ca <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e1cc      	b.n	8001d64 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d11e      	bne.n	8001a10 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019e2:	b672      	cpsid	i
}
 80019e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a0c:	b662      	cpsie	i
}
 8001a0e:	e035      	b.n	8001a7c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d11e      	bne.n	8001a56 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a52:	b662      	cpsie	i
}
 8001a54:	e012      	b.n	8001a7c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001a7c:	e172      	b.n	8001d64 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	f200 811f 	bhi.w	8001cc6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d123      	bne.n	8001ad8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fc7d 	bl	8002394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e173      	b.n	8001d8c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ad6:	e145      	b.n	8001d64 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d152      	bne.n	8001b86 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4906      	ldr	r1, [pc, #24]	@ (8001b04 <HAL_I2C_Master_Receive+0x23c>)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 faa8 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e148      	b.n	8001d8c <HAL_I2C_Master_Receive+0x4c4>
 8001afa:	bf00      	nop
 8001afc:	00100002 	.word	0x00100002
 8001b00:	ffff0000 	.word	0xffff0000
 8001b04:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b4e:	b662      	cpsie	i
}
 8001b50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b84:	e0ee      	b.n	8001d64 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4981      	ldr	r1, [pc, #516]	@ (8001d94 <HAL_I2C_Master_Receive+0x4cc>)
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 fa55 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0f5      	b.n	8001d8c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001be6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d98 <HAL_I2C_Master_Receive+0x4d0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	08db      	lsrs	r3, r3, #3
 8001bec:	4a6b      	ldr	r2, [pc, #428]	@ (8001d9c <HAL_I2C_Master_Receive+0x4d4>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0a1a      	lsrs	r2, r3, #8
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00da      	lsls	r2, r3, #3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d118      	bne.n	8001c3e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f043 0220 	orr.w	r2, r3, #32
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c2e:	b662      	cpsie	i
}
 8001c30:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0a6      	b.n	8001d8c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d1d9      	bne.n	8001c00 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c8e:	b662      	cpsie	i
}
 8001c90:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cc4:	e04e      	b.n	8001d64 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 fb62 	bl	8002394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e058      	b.n	8001d8c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d124      	bne.n	8001d64 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d107      	bne.n	8001d32 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d30:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f ae88 	bne.w	8001a7e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
  }
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	00010004 	.word	0x00010004
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	14f8b589 	.word	0x14f8b589

08001da0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	460b      	mov	r3, r1
 8001dae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d006      	beq.n	8001dca <I2C_MasterRequestWrite+0x2a>
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d003      	beq.n	8001dca <I2C_MasterRequestWrite+0x2a>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001dc8:	d108      	bne.n	8001ddc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	e00b      	b.n	8001df4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	d107      	bne.n	8001df4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001df2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f91d 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00d      	beq.n	8001e28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e1a:	d103      	bne.n	8001e24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e035      	b.n	8001e94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e30:	d108      	bne.n	8001e44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e32:	897b      	ldrh	r3, [r7, #10]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	e01b      	b.n	8001e7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e44:	897b      	ldrh	r3, [r7, #10]
 8001e46:	11db      	asrs	r3, r3, #7
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f003 0306 	and.w	r3, r3, #6
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f063 030f 	orn	r3, r3, #15
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	490e      	ldr	r1, [pc, #56]	@ (8001e9c <I2C_MasterRequestWrite+0xfc>)
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f966 	bl	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e010      	b.n	8001e94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e72:	897b      	ldrh	r3, [r7, #10]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4907      	ldr	r1, [pc, #28]	@ (8001ea0 <I2C_MasterRequestWrite+0x100>)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f956 	bl	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	00010008 	.word	0x00010008
 8001ea0:	00010002 	.word	0x00010002

08001ea4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ec8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d006      	beq.n	8001ede <I2C_MasterRequestRead+0x3a>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d003      	beq.n	8001ede <I2C_MasterRequestRead+0x3a>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001edc:	d108      	bne.n	8001ef0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e00b      	b.n	8001f08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	2b11      	cmp	r3, #17
 8001ef6:	d107      	bne.n	8001f08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f893 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00d      	beq.n	8001f3c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f2e:	d103      	bne.n	8001f38 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e079      	b.n	8002030 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f44:	d108      	bne.n	8001f58 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f46:	897b      	ldrh	r3, [r7, #10]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	611a      	str	r2, [r3, #16]
 8001f56:	e05f      	b.n	8002018 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f58:	897b      	ldrh	r3, [r7, #10]
 8001f5a:	11db      	asrs	r3, r3, #7
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f003 0306 	and.w	r3, r3, #6
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f063 030f 	orn	r3, r3, #15
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4930      	ldr	r1, [pc, #192]	@ (8002038 <I2C_MasterRequestRead+0x194>)
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f8dc 	bl	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e054      	b.n	8002030 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f86:	897b      	ldrh	r3, [r7, #10]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4929      	ldr	r1, [pc, #164]	@ (800203c <I2C_MasterRequestRead+0x198>)
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f8cc 	bl	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e044      	b.n	8002030 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f831 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ff2:	d103      	bne.n	8001ffc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e017      	b.n	8002030 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002000:	897b      	ldrh	r3, [r7, #10]
 8002002:	11db      	asrs	r3, r3, #7
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f003 0306 	and.w	r3, r3, #6
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f063 030e 	orn	r3, r3, #14
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4907      	ldr	r1, [pc, #28]	@ (800203c <I2C_MasterRequestRead+0x198>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f888 	bl	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	00010008 	.word	0x00010008
 800203c:	00010002 	.word	0x00010002

08002040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002050:	e048      	b.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d044      	beq.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7fe ff45 	bl	8000ee8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <I2C_WaitOnFlagUntilTimeout+0x30>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d139      	bne.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	0c1b      	lsrs	r3, r3, #16
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10d      	bne.n	8002096 <I2C_WaitOnFlagUntilTimeout+0x56>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	43da      	mvns	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4013      	ands	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	e00c      	b.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	43da      	mvns	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4013      	ands	r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d116      	bne.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f043 0220 	orr.w	r2, r3, #32
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e023      	b.n	800212c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10d      	bne.n	800210a <I2C_WaitOnFlagUntilTimeout+0xca>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4013      	ands	r3, r2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	e00c      	b.n	8002124 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	43da      	mvns	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4013      	ands	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	429a      	cmp	r2, r3
 8002128:	d093      	beq.n	8002052 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002142:	e071      	b.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002152:	d123      	bne.n	800219c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002162:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800216c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	f043 0204 	orr.w	r2, r3, #4
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e067      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d041      	beq.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a4:	f7fe fea0 	bl	8000ee8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d302      	bcc.n	80021ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d136      	bne.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10c      	bne.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4013      	ands	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	e00b      	b.n	80021f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf14      	ite	ne
 80021f0:	2301      	movne	r3, #1
 80021f2:	2300      	moveq	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d016      	beq.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	f043 0220 	orr.w	r2, r3, #32
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e021      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	0c1b      	lsrs	r3, r3, #16
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d10c      	bne.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	43da      	mvns	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4013      	ands	r3, r2
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e00b      	b.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4013      	ands	r3, r2
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	f47f af6d 	bne.w	8002144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002280:	e034      	b.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f8e3 	bl	800244e <I2C_IsAcknowledgeFailed>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e034      	b.n	80022fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d028      	beq.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7fe fe25 	bl	8000ee8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11d      	bne.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ba:	2b80      	cmp	r3, #128	@ 0x80
 80022bc:	d016      	beq.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e007      	b.n	80022fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f6:	2b80      	cmp	r3, #128	@ 0x80
 80022f8:	d1c3      	bne.n	8002282 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002310:	e034      	b.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f89b 	bl	800244e <I2C_IsAcknowledgeFailed>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e034      	b.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d028      	beq.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232a:	f7fe fddd 	bl	8000ee8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d11d      	bne.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b04      	cmp	r3, #4
 800234c:	d016      	beq.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e007      	b.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d1c3      	bne.n	8002312 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023a0:	e049      	b.n	8002436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b10      	cmp	r3, #16
 80023ae:	d119      	bne.n	80023e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0210 	mvn.w	r2, #16
 80023b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e030      	b.n	8002446 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e4:	f7fe fd80 	bl	8000ee8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d302      	bcc.n	80023fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d11d      	bne.n	8002436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002404:	2b40      	cmp	r3, #64	@ 0x40
 8002406:	d016      	beq.n	8002436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f043 0220 	orr.w	r2, r3, #32
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e007      	b.n	8002446 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002440:	2b40      	cmp	r3, #64	@ 0x40
 8002442:	d1ae      	bne.n	80023a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002464:	d11b      	bne.n	800249e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800246e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f043 0204 	orr.w	r2, r3, #4
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e272      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8087 	beq.w	80025da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024cc:	4b92      	ldr	r3, [pc, #584]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d00c      	beq.n	80024f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d112      	bne.n	800250a <HAL_RCC_OscConfig+0x5e>
 80024e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f0:	d10b      	bne.n	800250a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f2:	4b89      	ldr	r3, [pc, #548]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d06c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x12c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d168      	bne.n	80025d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e24c      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x76>
 8002514:	4b80      	ldr	r3, [pc, #512]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a7f      	ldr	r2, [pc, #508]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e02e      	b.n	8002580 <HAL_RCC_OscConfig+0xd4>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x98>
 800252a:	4b7b      	ldr	r3, [pc, #492]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a7a      	ldr	r2, [pc, #488]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b78      	ldr	r3, [pc, #480]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a77      	ldr	r2, [pc, #476]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 800253c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xd4>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0xbc>
 800254e:	4b72      	ldr	r3, [pc, #456]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a71      	ldr	r2, [pc, #452]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b6f      	ldr	r3, [pc, #444]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6e      	ldr	r2, [pc, #440]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xd4>
 8002568:	4b6b      	ldr	r3, [pc, #428]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6a      	ldr	r2, [pc, #424]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b68      	ldr	r3, [pc, #416]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a67      	ldr	r2, [pc, #412]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fcae 	bl	8000ee8 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fcaa 	bl	8000ee8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e200      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xe4>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fc9a 	bl	8000ee8 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fc96 	bl	8000ee8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1ec      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b53      	ldr	r3, [pc, #332]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x10c>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d063      	beq.n	80026ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025f2:	4b49      	ldr	r3, [pc, #292]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d11c      	bne.n	8002638 <HAL_RCC_OscConfig+0x18c>
 80025fe:	4b46      	ldr	r3, [pc, #280]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d116      	bne.n	8002638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	4b43      	ldr	r3, [pc, #268]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x176>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e1c0      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	4b3d      	ldr	r3, [pc, #244]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4939      	ldr	r1, [pc, #228]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	e03a      	b.n	80026ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b36      	ldr	r3, [pc, #216]	@ (800271c <HAL_RCC_OscConfig+0x270>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fc4f 	bl	8000ee8 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe fc4b 	bl	8000ee8 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1a1      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b2a      	ldr	r3, [pc, #168]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4927      	ldr	r1, [pc, #156]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b26      	ldr	r3, [pc, #152]	@ (800271c <HAL_RCC_OscConfig+0x270>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fc2e 	bl	8000ee8 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe fc2a 	bl	8000ee8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e180      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d03a      	beq.n	8002730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d019      	beq.n	80026f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b17      	ldr	r3, [pc, #92]	@ (8002720 <HAL_RCC_OscConfig+0x274>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe fc0e 	bl	8000ee8 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fc0a 	bl	8000ee8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e160      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f000 face 	bl	8002c90 <RCC_Delay>
 80026f4:	e01c      	b.n	8002730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_RCC_OscConfig+0x274>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fc:	f7fe fbf4 	bl	8000ee8 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002702:	e00f      	b.n	8002724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe fbf0 	bl	8000ee8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d908      	bls.n	8002724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e146      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	42420000 	.word	0x42420000
 8002720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	4b92      	ldr	r3, [pc, #584]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e9      	bne.n	8002704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a6 	beq.w	800288a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b8b      	ldr	r3, [pc, #556]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b88      	ldr	r3, [pc, #544]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4a87      	ldr	r2, [pc, #540]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	61d3      	str	r3, [r2, #28]
 800275a:	4b85      	ldr	r3, [pc, #532]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b82      	ldr	r3, [pc, #520]	@ (8002974 <HAL_RCC_OscConfig+0x4c8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b7f      	ldr	r3, [pc, #508]	@ (8002974 <HAL_RCC_OscConfig+0x4c8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a7e      	ldr	r2, [pc, #504]	@ (8002974 <HAL_RCC_OscConfig+0x4c8>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fe fbb1 	bl	8000ee8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe fbad 	bl	8000ee8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b64      	cmp	r3, #100	@ 0x64
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e103      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b75      	ldr	r3, [pc, #468]	@ (8002974 <HAL_RCC_OscConfig+0x4c8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x312>
 80027b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	e02d      	b.n	800281a <HAL_RCC_OscConfig+0x36e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x334>
 80027c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a69      	ldr	r2, [pc, #420]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	4b67      	ldr	r3, [pc, #412]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a66      	ldr	r2, [pc, #408]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6213      	str	r3, [r2, #32]
 80027de:	e01c      	b.n	800281a <HAL_RCC_OscConfig+0x36e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d10c      	bne.n	8002802 <HAL_RCC_OscConfig+0x356>
 80027e8:	4b61      	ldr	r3, [pc, #388]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4a60      	ldr	r2, [pc, #384]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	6213      	str	r3, [r2, #32]
 80027f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	e00b      	b.n	800281a <HAL_RCC_OscConfig+0x36e>
 8002802:	4b5b      	ldr	r3, [pc, #364]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a5a      	ldr	r2, [pc, #360]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	4b58      	ldr	r3, [pc, #352]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a57      	ldr	r2, [pc, #348]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d015      	beq.n	800284e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7fe fb61 	bl	8000ee8 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe fb5d 	bl	8000ee8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0b1      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	4b4b      	ldr	r3, [pc, #300]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ee      	beq.n	800282a <HAL_RCC_OscConfig+0x37e>
 800284c:	e014      	b.n	8002878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7fe fb4b 	bl	8000ee8 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe fb47 	bl	8000ee8 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e09b      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286c:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ee      	bne.n	8002856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	4b3c      	ldr	r3, [pc, #240]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a3b      	ldr	r2, [pc, #236]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8087 	beq.w	80029a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002894:	4b36      	ldr	r3, [pc, #216]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d061      	beq.n	8002964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d146      	bne.n	8002936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a8:	4b33      	ldr	r3, [pc, #204]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7fe fb1b 	bl	8000ee8 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b6:	f7fe fb17 	bl	8000ee8 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e06d      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c8:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028dc:	d108      	bne.n	80028f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028de:	4b24      	ldr	r3, [pc, #144]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	4921      	ldr	r1, [pc, #132]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a19      	ldr	r1, [r3, #32]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	430b      	orrs	r3, r1
 8002902:	491b      	ldr	r1, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe faeb 	bl	8000ee8 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fae7 	bl	8000ee8 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e03d      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x46a>
 8002934:	e035      	b.n	80029a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe fad4 	bl	8000ee8 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe fad0 	bl	8000ee8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e026      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002956:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x498>
 8002962:	e01e      	b.n	80029a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d107      	bne.n	800297c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e019      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
 8002978:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_OscConfig+0x500>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	429a      	cmp	r2, r3
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000

080029b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0d0      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d910      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b67      	ldr	r3, [pc, #412]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 0207 	bic.w	r2, r3, #7
 80029da:	4965      	ldr	r1, [pc, #404]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b63      	ldr	r3, [pc, #396]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0b8      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	4b59      	ldr	r3, [pc, #356]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a58      	ldr	r2, [pc, #352]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a24:	4b53      	ldr	r3, [pc, #332]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a52      	ldr	r2, [pc, #328]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b50      	ldr	r3, [pc, #320]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	494d      	ldr	r1, [pc, #308]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d040      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b47      	ldr	r3, [pc, #284]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d115      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e07f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	4b41      	ldr	r3, [pc, #260]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e073      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06b      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8e:	4b39      	ldr	r3, [pc, #228]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4936      	ldr	r1, [pc, #216]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fa22 	bl	8000ee8 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7fe fa1e 	bl	8000ee8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e053      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	4b2d      	ldr	r3, [pc, #180]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 020c 	and.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1eb      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b27      	ldr	r3, [pc, #156]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d210      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b24      	ldr	r3, [pc, #144]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0207 	bic.w	r2, r3, #7
 8002ae6:	4922      	ldr	r1, [pc, #136]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e032      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4916      	ldr	r1, [pc, #88]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	490e      	ldr	r1, [pc, #56]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b3e:	f000 f821 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	490a      	ldr	r1, [pc, #40]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b50:	5ccb      	ldrb	r3, [r1, r3]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a09      	ldr	r2, [pc, #36]	@ (8002b7c <HAL_RCC_ClockConfig+0x1cc>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_RCC_ClockConfig+0x1d0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe f980 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40022000 	.word	0x40022000
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08003b24 	.word	0x08003b24
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d002      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x30>
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x36>
 8002bb2:	e027      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bb6:	613b      	str	r3, [r7, #16]
      break;
 8002bb8:	e027      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	0c9b      	lsrs	r3, r3, #18
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	4a17      	ldr	r2, [pc, #92]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bc4:	5cd3      	ldrb	r3, [r2, r3]
 8002bc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d010      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bd2:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	0c5b      	lsrs	r3, r3, #17
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	4a11      	ldr	r2, [pc, #68]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002be6:	fb03 f202 	mul.w	r2, r3, r2
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	e004      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	613b      	str	r3, [r7, #16]
      break;
 8002c02:	e002      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c06:	613b      	str	r3, [r7, #16]
      break;
 8002c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0a:	693b      	ldr	r3, [r7, #16]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	007a1200 	.word	0x007a1200
 8002c20:	08003b3c 	.word	0x08003b3c
 8002c24:	08003b4c 	.word	0x08003b4c
 8002c28:	003d0900 	.word	0x003d0900

08002c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b02      	ldr	r3, [pc, #8]	@ (8002c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	20000000 	.word	0x20000000

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c44:	f7ff fff2 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	@ (8002c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	08003b34 	.word	0x08003b34

08002c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c6c:	f7ff ffde 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0adb      	lsrs	r3, r3, #11
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4903      	ldr	r1, [pc, #12]	@ (8002c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	08003b34 	.word	0x08003b34

08002c90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <RCC_Delay+0x34>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc8 <RCC_Delay+0x38>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0a5b      	lsrs	r3, r3, #9
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cac:	bf00      	nop
  }
  while (Delay --);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1e5a      	subs	r2, r3, #1
 8002cb2:	60fa      	str	r2, [r7, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f9      	bne.n	8002cac <RCC_Delay+0x1c>
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	10624dd3 	.word	0x10624dd3

08002ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e042      	b.n	8002d64 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fd ffc6 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2224      	movs	r2, #36	@ 0x24
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f971 	bl	8002ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	@ 0x28
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d175      	bne.n	8002e78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_UART_Transmit+0x2c>
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e06e      	b.n	8002e7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2221      	movs	r2, #33	@ 0x21
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002daa:	f7fe f89d 	bl	8000ee8 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	88fa      	ldrh	r2, [r7, #6]
 8002dba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_UART_Transmit+0x6c>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	e003      	b.n	8002de0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002de0:	e02e      	b.n	8002e40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2180      	movs	r1, #128	@ 0x80
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f848 	bl	8002e82 <UART_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e03a      	b.n	8002e7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10b      	bne.n	8002e22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	e007      	b.n	8002e32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1cb      	bne.n	8002de2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2140      	movs	r1, #64	@ 0x40
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f814 	bl	8002e82 <UART_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e006      	b.n	8002e7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e000      	b.n	8002e7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e92:	e03b      	b.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9a:	d037      	beq.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9c:	f7fe f824 	bl	8000ee8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	6a3a      	ldr	r2, [r7, #32]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e03a      	b.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d023      	beq.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b80      	cmp	r3, #128	@ 0x80
 8002ec8:	d020      	beq.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b40      	cmp	r3, #64	@ 0x40
 8002ece:	d01d      	beq.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d116      	bne.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f81d 	bl	8002f34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2208      	movs	r2, #8
 8002efe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e00f      	b.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4013      	ands	r3, r2
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d0b4      	beq.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b095      	sub	sp, #84	@ 0x54
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	e853 3f00 	ldrex	r3, [r3]
 8002f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e5      	bne.n	8002f70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d119      	bne.n	8002fe0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f023 0310 	bic.w	r3, r3, #16
 8002fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fcc:	61ba      	str	r2, [r7, #24]
 8002fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6979      	ldr	r1, [r7, #20]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e5      	bne.n	8002fac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fee:	bf00      	nop
 8002ff0:	3754      	adds	r7, #84	@ 0x54
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003032:	f023 030c 	bic.w	r3, r3, #12
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	430b      	orrs	r3, r1
 800303e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2c      	ldr	r2, [pc, #176]	@ (800310c <UART_SetConfig+0x114>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d103      	bne.n	8003068 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003060:	f7ff fe02 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	e002      	b.n	800306e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003068:	f7ff fdea 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 800306c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009a      	lsls	r2, r3, #2
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	4a22      	ldr	r2, [pc, #136]	@ (8003110 <UART_SetConfig+0x118>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	0119      	lsls	r1, r3, #4
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003110 <UART_SetConfig+0x118>)
 80030a6:	fba3 0302 	umull	r0, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2064      	movs	r0, #100	@ 0x64
 80030ae:	fb00 f303 	mul.w	r3, r0, r3
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	3332      	adds	r3, #50	@ 0x32
 80030b8:	4a15      	ldr	r2, [pc, #84]	@ (8003110 <UART_SetConfig+0x118>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c4:	4419      	add	r1, r3
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009a      	lsls	r2, r3, #2
 80030d0:	441a      	add	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <UART_SetConfig+0x118>)
 80030de:	fba3 0302 	umull	r0, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2064      	movs	r0, #100	@ 0x64
 80030e6:	fb00 f303 	mul.w	r3, r0, r3
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	3332      	adds	r3, #50	@ 0x32
 80030f0:	4a07      	ldr	r2, [pc, #28]	@ (8003110 <UART_SetConfig+0x118>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	f003 020f 	and.w	r2, r3, #15
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	440a      	add	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40013800 	.word	0x40013800
 8003110:	51eb851f 	.word	0x51eb851f

08003114 <sbrk_aligned>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	4e0f      	ldr	r6, [pc, #60]	@ (8003154 <sbrk_aligned+0x40>)
 8003118:	460c      	mov	r4, r1
 800311a:	6831      	ldr	r1, [r6, #0]
 800311c:	4605      	mov	r5, r0
 800311e:	b911      	cbnz	r1, 8003126 <sbrk_aligned+0x12>
 8003120:	f000 f8d0 	bl	80032c4 <_sbrk_r>
 8003124:	6030      	str	r0, [r6, #0]
 8003126:	4621      	mov	r1, r4
 8003128:	4628      	mov	r0, r5
 800312a:	f000 f8cb 	bl	80032c4 <_sbrk_r>
 800312e:	1c43      	adds	r3, r0, #1
 8003130:	d103      	bne.n	800313a <sbrk_aligned+0x26>
 8003132:	f04f 34ff 	mov.w	r4, #4294967295
 8003136:	4620      	mov	r0, r4
 8003138:	bd70      	pop	{r4, r5, r6, pc}
 800313a:	1cc4      	adds	r4, r0, #3
 800313c:	f024 0403 	bic.w	r4, r4, #3
 8003140:	42a0      	cmp	r0, r4
 8003142:	d0f8      	beq.n	8003136 <sbrk_aligned+0x22>
 8003144:	1a21      	subs	r1, r4, r0
 8003146:	4628      	mov	r0, r5
 8003148:	f000 f8bc 	bl	80032c4 <_sbrk_r>
 800314c:	3001      	adds	r0, #1
 800314e:	d1f2      	bne.n	8003136 <sbrk_aligned+0x22>
 8003150:	e7ef      	b.n	8003132 <sbrk_aligned+0x1e>
 8003152:	bf00      	nop
 8003154:	2000011c 	.word	0x2000011c

08003158 <_malloc_r>:
 8003158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800315c:	1ccd      	adds	r5, r1, #3
 800315e:	f025 0503 	bic.w	r5, r5, #3
 8003162:	3508      	adds	r5, #8
 8003164:	2d0c      	cmp	r5, #12
 8003166:	bf38      	it	cc
 8003168:	250c      	movcc	r5, #12
 800316a:	2d00      	cmp	r5, #0
 800316c:	4606      	mov	r6, r0
 800316e:	db01      	blt.n	8003174 <_malloc_r+0x1c>
 8003170:	42a9      	cmp	r1, r5
 8003172:	d904      	bls.n	800317e <_malloc_r+0x26>
 8003174:	230c      	movs	r3, #12
 8003176:	6033      	str	r3, [r6, #0]
 8003178:	2000      	movs	r0, #0
 800317a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800317e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003254 <_malloc_r+0xfc>
 8003182:	f000 f869 	bl	8003258 <__malloc_lock>
 8003186:	f8d8 3000 	ldr.w	r3, [r8]
 800318a:	461c      	mov	r4, r3
 800318c:	bb44      	cbnz	r4, 80031e0 <_malloc_r+0x88>
 800318e:	4629      	mov	r1, r5
 8003190:	4630      	mov	r0, r6
 8003192:	f7ff ffbf 	bl	8003114 <sbrk_aligned>
 8003196:	1c43      	adds	r3, r0, #1
 8003198:	4604      	mov	r4, r0
 800319a:	d158      	bne.n	800324e <_malloc_r+0xf6>
 800319c:	f8d8 4000 	ldr.w	r4, [r8]
 80031a0:	4627      	mov	r7, r4
 80031a2:	2f00      	cmp	r7, #0
 80031a4:	d143      	bne.n	800322e <_malloc_r+0xd6>
 80031a6:	2c00      	cmp	r4, #0
 80031a8:	d04b      	beq.n	8003242 <_malloc_r+0xea>
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	4639      	mov	r1, r7
 80031ae:	4630      	mov	r0, r6
 80031b0:	eb04 0903 	add.w	r9, r4, r3
 80031b4:	f000 f886 	bl	80032c4 <_sbrk_r>
 80031b8:	4581      	cmp	r9, r0
 80031ba:	d142      	bne.n	8003242 <_malloc_r+0xea>
 80031bc:	6821      	ldr	r1, [r4, #0]
 80031be:	4630      	mov	r0, r6
 80031c0:	1a6d      	subs	r5, r5, r1
 80031c2:	4629      	mov	r1, r5
 80031c4:	f7ff ffa6 	bl	8003114 <sbrk_aligned>
 80031c8:	3001      	adds	r0, #1
 80031ca:	d03a      	beq.n	8003242 <_malloc_r+0xea>
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	442b      	add	r3, r5
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	f8d8 3000 	ldr.w	r3, [r8]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	bb62      	cbnz	r2, 8003234 <_malloc_r+0xdc>
 80031da:	f8c8 7000 	str.w	r7, [r8]
 80031de:	e00f      	b.n	8003200 <_malloc_r+0xa8>
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	1b52      	subs	r2, r2, r5
 80031e4:	d420      	bmi.n	8003228 <_malloc_r+0xd0>
 80031e6:	2a0b      	cmp	r2, #11
 80031e8:	d917      	bls.n	800321a <_malloc_r+0xc2>
 80031ea:	1961      	adds	r1, r4, r5
 80031ec:	42a3      	cmp	r3, r4
 80031ee:	6025      	str	r5, [r4, #0]
 80031f0:	bf18      	it	ne
 80031f2:	6059      	strne	r1, [r3, #4]
 80031f4:	6863      	ldr	r3, [r4, #4]
 80031f6:	bf08      	it	eq
 80031f8:	f8c8 1000 	streq.w	r1, [r8]
 80031fc:	5162      	str	r2, [r4, r5]
 80031fe:	604b      	str	r3, [r1, #4]
 8003200:	4630      	mov	r0, r6
 8003202:	f000 f82f 	bl	8003264 <__malloc_unlock>
 8003206:	f104 000b 	add.w	r0, r4, #11
 800320a:	1d23      	adds	r3, r4, #4
 800320c:	f020 0007 	bic.w	r0, r0, #7
 8003210:	1ac2      	subs	r2, r0, r3
 8003212:	bf1c      	itt	ne
 8003214:	1a1b      	subne	r3, r3, r0
 8003216:	50a3      	strne	r3, [r4, r2]
 8003218:	e7af      	b.n	800317a <_malloc_r+0x22>
 800321a:	6862      	ldr	r2, [r4, #4]
 800321c:	42a3      	cmp	r3, r4
 800321e:	bf0c      	ite	eq
 8003220:	f8c8 2000 	streq.w	r2, [r8]
 8003224:	605a      	strne	r2, [r3, #4]
 8003226:	e7eb      	b.n	8003200 <_malloc_r+0xa8>
 8003228:	4623      	mov	r3, r4
 800322a:	6864      	ldr	r4, [r4, #4]
 800322c:	e7ae      	b.n	800318c <_malloc_r+0x34>
 800322e:	463c      	mov	r4, r7
 8003230:	687f      	ldr	r7, [r7, #4]
 8003232:	e7b6      	b.n	80031a2 <_malloc_r+0x4a>
 8003234:	461a      	mov	r2, r3
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	42a3      	cmp	r3, r4
 800323a:	d1fb      	bne.n	8003234 <_malloc_r+0xdc>
 800323c:	2300      	movs	r3, #0
 800323e:	6053      	str	r3, [r2, #4]
 8003240:	e7de      	b.n	8003200 <_malloc_r+0xa8>
 8003242:	230c      	movs	r3, #12
 8003244:	4630      	mov	r0, r6
 8003246:	6033      	str	r3, [r6, #0]
 8003248:	f000 f80c 	bl	8003264 <__malloc_unlock>
 800324c:	e794      	b.n	8003178 <_malloc_r+0x20>
 800324e:	6005      	str	r5, [r0, #0]
 8003250:	e7d6      	b.n	8003200 <_malloc_r+0xa8>
 8003252:	bf00      	nop
 8003254:	20000120 	.word	0x20000120

08003258 <__malloc_lock>:
 8003258:	4801      	ldr	r0, [pc, #4]	@ (8003260 <__malloc_lock+0x8>)
 800325a:	f000 b86d 	b.w	8003338 <__retarget_lock_acquire_recursive>
 800325e:	bf00      	nop
 8003260:	20000260 	.word	0x20000260

08003264 <__malloc_unlock>:
 8003264:	4801      	ldr	r0, [pc, #4]	@ (800326c <__malloc_unlock+0x8>)
 8003266:	f000 b868 	b.w	800333a <__retarget_lock_release_recursive>
 800326a:	bf00      	nop
 800326c:	20000260 	.word	0x20000260

08003270 <siprintf>:
 8003270:	b40e      	push	{r1, r2, r3}
 8003272:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003276:	b510      	push	{r4, lr}
 8003278:	2400      	movs	r4, #0
 800327a:	b09d      	sub	sp, #116	@ 0x74
 800327c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800327e:	9002      	str	r0, [sp, #8]
 8003280:	9006      	str	r0, [sp, #24]
 8003282:	9107      	str	r1, [sp, #28]
 8003284:	9104      	str	r1, [sp, #16]
 8003286:	4809      	ldr	r0, [pc, #36]	@ (80032ac <siprintf+0x3c>)
 8003288:	4909      	ldr	r1, [pc, #36]	@ (80032b0 <siprintf+0x40>)
 800328a:	f853 2b04 	ldr.w	r2, [r3], #4
 800328e:	9105      	str	r1, [sp, #20]
 8003290:	6800      	ldr	r0, [r0, #0]
 8003292:	a902      	add	r1, sp, #8
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003298:	f000 f8f4 	bl	8003484 <_svfiprintf_r>
 800329c:	9b02      	ldr	r3, [sp, #8]
 800329e:	701c      	strb	r4, [r3, #0]
 80032a0:	b01d      	add	sp, #116	@ 0x74
 80032a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a6:	b003      	add	sp, #12
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	2000000c 	.word	0x2000000c
 80032b0:	ffff0208 	.word	0xffff0208

080032b4 <memset>:
 80032b4:	4603      	mov	r3, r0
 80032b6:	4402      	add	r2, r0
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d100      	bne.n	80032be <memset+0xa>
 80032bc:	4770      	bx	lr
 80032be:	f803 1b01 	strb.w	r1, [r3], #1
 80032c2:	e7f9      	b.n	80032b8 <memset+0x4>

080032c4 <_sbrk_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	2300      	movs	r3, #0
 80032c8:	4d05      	ldr	r5, [pc, #20]	@ (80032e0 <_sbrk_r+0x1c>)
 80032ca:	4604      	mov	r4, r0
 80032cc:	4608      	mov	r0, r1
 80032ce:	602b      	str	r3, [r5, #0]
 80032d0:	f7fd fd50 	bl	8000d74 <_sbrk>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d102      	bne.n	80032de <_sbrk_r+0x1a>
 80032d8:	682b      	ldr	r3, [r5, #0]
 80032da:	b103      	cbz	r3, 80032de <_sbrk_r+0x1a>
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	2000025c 	.word	0x2000025c

080032e4 <__errno>:
 80032e4:	4b01      	ldr	r3, [pc, #4]	@ (80032ec <__errno+0x8>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	2000000c 	.word	0x2000000c

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	2600      	movs	r6, #0
 80032f4:	4d0c      	ldr	r5, [pc, #48]	@ (8003328 <__libc_init_array+0x38>)
 80032f6:	4c0d      	ldr	r4, [pc, #52]	@ (800332c <__libc_init_array+0x3c>)
 80032f8:	1b64      	subs	r4, r4, r5
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	42a6      	cmp	r6, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	f000 fbb8 	bl	8003a74 <_init>
 8003304:	2600      	movs	r6, #0
 8003306:	4d0a      	ldr	r5, [pc, #40]	@ (8003330 <__libc_init_array+0x40>)
 8003308:	4c0a      	ldr	r4, [pc, #40]	@ (8003334 <__libc_init_array+0x44>)
 800330a:	1b64      	subs	r4, r4, r5
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	42a6      	cmp	r6, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	f855 3b04 	ldr.w	r3, [r5], #4
 8003318:	4798      	blx	r3
 800331a:	3601      	adds	r6, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003322:	4798      	blx	r3
 8003324:	3601      	adds	r6, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	08003b8c 	.word	0x08003b8c
 800332c:	08003b8c 	.word	0x08003b8c
 8003330:	08003b8c 	.word	0x08003b8c
 8003334:	08003b90 	.word	0x08003b90

08003338 <__retarget_lock_acquire_recursive>:
 8003338:	4770      	bx	lr

0800333a <__retarget_lock_release_recursive>:
 800333a:	4770      	bx	lr

0800333c <_free_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4605      	mov	r5, r0
 8003340:	2900      	cmp	r1, #0
 8003342:	d040      	beq.n	80033c6 <_free_r+0x8a>
 8003344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003348:	1f0c      	subs	r4, r1, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	bfb8      	it	lt
 800334e:	18e4      	addlt	r4, r4, r3
 8003350:	f7ff ff82 	bl	8003258 <__malloc_lock>
 8003354:	4a1c      	ldr	r2, [pc, #112]	@ (80033c8 <_free_r+0x8c>)
 8003356:	6813      	ldr	r3, [r2, #0]
 8003358:	b933      	cbnz	r3, 8003368 <_free_r+0x2c>
 800335a:	6063      	str	r3, [r4, #4]
 800335c:	6014      	str	r4, [r2, #0]
 800335e:	4628      	mov	r0, r5
 8003360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003364:	f7ff bf7e 	b.w	8003264 <__malloc_unlock>
 8003368:	42a3      	cmp	r3, r4
 800336a:	d908      	bls.n	800337e <_free_r+0x42>
 800336c:	6820      	ldr	r0, [r4, #0]
 800336e:	1821      	adds	r1, r4, r0
 8003370:	428b      	cmp	r3, r1
 8003372:	bf01      	itttt	eq
 8003374:	6819      	ldreq	r1, [r3, #0]
 8003376:	685b      	ldreq	r3, [r3, #4]
 8003378:	1809      	addeq	r1, r1, r0
 800337a:	6021      	streq	r1, [r4, #0]
 800337c:	e7ed      	b.n	800335a <_free_r+0x1e>
 800337e:	461a      	mov	r2, r3
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b10b      	cbz	r3, 8003388 <_free_r+0x4c>
 8003384:	42a3      	cmp	r3, r4
 8003386:	d9fa      	bls.n	800337e <_free_r+0x42>
 8003388:	6811      	ldr	r1, [r2, #0]
 800338a:	1850      	adds	r0, r2, r1
 800338c:	42a0      	cmp	r0, r4
 800338e:	d10b      	bne.n	80033a8 <_free_r+0x6c>
 8003390:	6820      	ldr	r0, [r4, #0]
 8003392:	4401      	add	r1, r0
 8003394:	1850      	adds	r0, r2, r1
 8003396:	4283      	cmp	r3, r0
 8003398:	6011      	str	r1, [r2, #0]
 800339a:	d1e0      	bne.n	800335e <_free_r+0x22>
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4408      	add	r0, r1
 80033a2:	6010      	str	r0, [r2, #0]
 80033a4:	6053      	str	r3, [r2, #4]
 80033a6:	e7da      	b.n	800335e <_free_r+0x22>
 80033a8:	d902      	bls.n	80033b0 <_free_r+0x74>
 80033aa:	230c      	movs	r3, #12
 80033ac:	602b      	str	r3, [r5, #0]
 80033ae:	e7d6      	b.n	800335e <_free_r+0x22>
 80033b0:	6820      	ldr	r0, [r4, #0]
 80033b2:	1821      	adds	r1, r4, r0
 80033b4:	428b      	cmp	r3, r1
 80033b6:	bf01      	itttt	eq
 80033b8:	6819      	ldreq	r1, [r3, #0]
 80033ba:	685b      	ldreq	r3, [r3, #4]
 80033bc:	1809      	addeq	r1, r1, r0
 80033be:	6021      	streq	r1, [r4, #0]
 80033c0:	6063      	str	r3, [r4, #4]
 80033c2:	6054      	str	r4, [r2, #4]
 80033c4:	e7cb      	b.n	800335e <_free_r+0x22>
 80033c6:	bd38      	pop	{r3, r4, r5, pc}
 80033c8:	20000120 	.word	0x20000120

080033cc <__ssputs_r>:
 80033cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	461f      	mov	r7, r3
 80033d2:	688e      	ldr	r6, [r1, #8]
 80033d4:	4682      	mov	sl, r0
 80033d6:	42be      	cmp	r6, r7
 80033d8:	460c      	mov	r4, r1
 80033da:	4690      	mov	r8, r2
 80033dc:	680b      	ldr	r3, [r1, #0]
 80033de:	d82d      	bhi.n	800343c <__ssputs_r+0x70>
 80033e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80033e8:	d026      	beq.n	8003438 <__ssputs_r+0x6c>
 80033ea:	6965      	ldr	r5, [r4, #20]
 80033ec:	6909      	ldr	r1, [r1, #16]
 80033ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033f2:	eba3 0901 	sub.w	r9, r3, r1
 80033f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033fa:	1c7b      	adds	r3, r7, #1
 80033fc:	444b      	add	r3, r9
 80033fe:	106d      	asrs	r5, r5, #1
 8003400:	429d      	cmp	r5, r3
 8003402:	bf38      	it	cc
 8003404:	461d      	movcc	r5, r3
 8003406:	0553      	lsls	r3, r2, #21
 8003408:	d527      	bpl.n	800345a <__ssputs_r+0x8e>
 800340a:	4629      	mov	r1, r5
 800340c:	f7ff fea4 	bl	8003158 <_malloc_r>
 8003410:	4606      	mov	r6, r0
 8003412:	b360      	cbz	r0, 800346e <__ssputs_r+0xa2>
 8003414:	464a      	mov	r2, r9
 8003416:	6921      	ldr	r1, [r4, #16]
 8003418:	f000 fae8 	bl	80039ec <memcpy>
 800341c:	89a3      	ldrh	r3, [r4, #12]
 800341e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003426:	81a3      	strh	r3, [r4, #12]
 8003428:	6126      	str	r6, [r4, #16]
 800342a:	444e      	add	r6, r9
 800342c:	6026      	str	r6, [r4, #0]
 800342e:	463e      	mov	r6, r7
 8003430:	6165      	str	r5, [r4, #20]
 8003432:	eba5 0509 	sub.w	r5, r5, r9
 8003436:	60a5      	str	r5, [r4, #8]
 8003438:	42be      	cmp	r6, r7
 800343a:	d900      	bls.n	800343e <__ssputs_r+0x72>
 800343c:	463e      	mov	r6, r7
 800343e:	4632      	mov	r2, r6
 8003440:	4641      	mov	r1, r8
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	f000 faaa 	bl	800399c <memmove>
 8003448:	2000      	movs	r0, #0
 800344a:	68a3      	ldr	r3, [r4, #8]
 800344c:	1b9b      	subs	r3, r3, r6
 800344e:	60a3      	str	r3, [r4, #8]
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	4433      	add	r3, r6
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800345a:	462a      	mov	r2, r5
 800345c:	f000 fad4 	bl	8003a08 <_realloc_r>
 8003460:	4606      	mov	r6, r0
 8003462:	2800      	cmp	r0, #0
 8003464:	d1e0      	bne.n	8003428 <__ssputs_r+0x5c>
 8003466:	4650      	mov	r0, sl
 8003468:	6921      	ldr	r1, [r4, #16]
 800346a:	f7ff ff67 	bl	800333c <_free_r>
 800346e:	230c      	movs	r3, #12
 8003470:	f8ca 3000 	str.w	r3, [sl]
 8003474:	89a3      	ldrh	r3, [r4, #12]
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
 800347a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	e7e9      	b.n	8003456 <__ssputs_r+0x8a>
	...

08003484 <_svfiprintf_r>:
 8003484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003488:	4698      	mov	r8, r3
 800348a:	898b      	ldrh	r3, [r1, #12]
 800348c:	4607      	mov	r7, r0
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	460d      	mov	r5, r1
 8003492:	4614      	mov	r4, r2
 8003494:	b09d      	sub	sp, #116	@ 0x74
 8003496:	d510      	bpl.n	80034ba <_svfiprintf_r+0x36>
 8003498:	690b      	ldr	r3, [r1, #16]
 800349a:	b973      	cbnz	r3, 80034ba <_svfiprintf_r+0x36>
 800349c:	2140      	movs	r1, #64	@ 0x40
 800349e:	f7ff fe5b 	bl	8003158 <_malloc_r>
 80034a2:	6028      	str	r0, [r5, #0]
 80034a4:	6128      	str	r0, [r5, #16]
 80034a6:	b930      	cbnz	r0, 80034b6 <_svfiprintf_r+0x32>
 80034a8:	230c      	movs	r3, #12
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	b01d      	add	sp, #116	@ 0x74
 80034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b6:	2340      	movs	r3, #64	@ 0x40
 80034b8:	616b      	str	r3, [r5, #20]
 80034ba:	2300      	movs	r3, #0
 80034bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80034be:	2320      	movs	r3, #32
 80034c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034c4:	2330      	movs	r3, #48	@ 0x30
 80034c6:	f04f 0901 	mov.w	r9, #1
 80034ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80034ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003668 <_svfiprintf_r+0x1e4>
 80034d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034d6:	4623      	mov	r3, r4
 80034d8:	469a      	mov	sl, r3
 80034da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034de:	b10a      	cbz	r2, 80034e4 <_svfiprintf_r+0x60>
 80034e0:	2a25      	cmp	r2, #37	@ 0x25
 80034e2:	d1f9      	bne.n	80034d8 <_svfiprintf_r+0x54>
 80034e4:	ebba 0b04 	subs.w	fp, sl, r4
 80034e8:	d00b      	beq.n	8003502 <_svfiprintf_r+0x7e>
 80034ea:	465b      	mov	r3, fp
 80034ec:	4622      	mov	r2, r4
 80034ee:	4629      	mov	r1, r5
 80034f0:	4638      	mov	r0, r7
 80034f2:	f7ff ff6b 	bl	80033cc <__ssputs_r>
 80034f6:	3001      	adds	r0, #1
 80034f8:	f000 80a7 	beq.w	800364a <_svfiprintf_r+0x1c6>
 80034fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034fe:	445a      	add	r2, fp
 8003500:	9209      	str	r2, [sp, #36]	@ 0x24
 8003502:	f89a 3000 	ldrb.w	r3, [sl]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 809f 	beq.w	800364a <_svfiprintf_r+0x1c6>
 800350c:	2300      	movs	r3, #0
 800350e:	f04f 32ff 	mov.w	r2, #4294967295
 8003512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003516:	f10a 0a01 	add.w	sl, sl, #1
 800351a:	9304      	str	r3, [sp, #16]
 800351c:	9307      	str	r3, [sp, #28]
 800351e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003522:	931a      	str	r3, [sp, #104]	@ 0x68
 8003524:	4654      	mov	r4, sl
 8003526:	2205      	movs	r2, #5
 8003528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800352c:	484e      	ldr	r0, [pc, #312]	@ (8003668 <_svfiprintf_r+0x1e4>)
 800352e:	f000 fa4f 	bl	80039d0 <memchr>
 8003532:	9a04      	ldr	r2, [sp, #16]
 8003534:	b9d8      	cbnz	r0, 800356e <_svfiprintf_r+0xea>
 8003536:	06d0      	lsls	r0, r2, #27
 8003538:	bf44      	itt	mi
 800353a:	2320      	movmi	r3, #32
 800353c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003540:	0711      	lsls	r1, r2, #28
 8003542:	bf44      	itt	mi
 8003544:	232b      	movmi	r3, #43	@ 0x2b
 8003546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800354a:	f89a 3000 	ldrb.w	r3, [sl]
 800354e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003550:	d015      	beq.n	800357e <_svfiprintf_r+0xfa>
 8003552:	4654      	mov	r4, sl
 8003554:	2000      	movs	r0, #0
 8003556:	f04f 0c0a 	mov.w	ip, #10
 800355a:	9a07      	ldr	r2, [sp, #28]
 800355c:	4621      	mov	r1, r4
 800355e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003562:	3b30      	subs	r3, #48	@ 0x30
 8003564:	2b09      	cmp	r3, #9
 8003566:	d94b      	bls.n	8003600 <_svfiprintf_r+0x17c>
 8003568:	b1b0      	cbz	r0, 8003598 <_svfiprintf_r+0x114>
 800356a:	9207      	str	r2, [sp, #28]
 800356c:	e014      	b.n	8003598 <_svfiprintf_r+0x114>
 800356e:	eba0 0308 	sub.w	r3, r0, r8
 8003572:	fa09 f303 	lsl.w	r3, r9, r3
 8003576:	4313      	orrs	r3, r2
 8003578:	46a2      	mov	sl, r4
 800357a:	9304      	str	r3, [sp, #16]
 800357c:	e7d2      	b.n	8003524 <_svfiprintf_r+0xa0>
 800357e:	9b03      	ldr	r3, [sp, #12]
 8003580:	1d19      	adds	r1, r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	9103      	str	r1, [sp, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	bfbb      	ittet	lt
 800358a:	425b      	neglt	r3, r3
 800358c:	f042 0202 	orrlt.w	r2, r2, #2
 8003590:	9307      	strge	r3, [sp, #28]
 8003592:	9307      	strlt	r3, [sp, #28]
 8003594:	bfb8      	it	lt
 8003596:	9204      	strlt	r2, [sp, #16]
 8003598:	7823      	ldrb	r3, [r4, #0]
 800359a:	2b2e      	cmp	r3, #46	@ 0x2e
 800359c:	d10a      	bne.n	80035b4 <_svfiprintf_r+0x130>
 800359e:	7863      	ldrb	r3, [r4, #1]
 80035a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80035a2:	d132      	bne.n	800360a <_svfiprintf_r+0x186>
 80035a4:	9b03      	ldr	r3, [sp, #12]
 80035a6:	3402      	adds	r4, #2
 80035a8:	1d1a      	adds	r2, r3, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	9203      	str	r2, [sp, #12]
 80035ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035b2:	9305      	str	r3, [sp, #20]
 80035b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800366c <_svfiprintf_r+0x1e8>
 80035b8:	2203      	movs	r2, #3
 80035ba:	4650      	mov	r0, sl
 80035bc:	7821      	ldrb	r1, [r4, #0]
 80035be:	f000 fa07 	bl	80039d0 <memchr>
 80035c2:	b138      	cbz	r0, 80035d4 <_svfiprintf_r+0x150>
 80035c4:	2240      	movs	r2, #64	@ 0x40
 80035c6:	9b04      	ldr	r3, [sp, #16]
 80035c8:	eba0 000a 	sub.w	r0, r0, sl
 80035cc:	4082      	lsls	r2, r0
 80035ce:	4313      	orrs	r3, r2
 80035d0:	3401      	adds	r4, #1
 80035d2:	9304      	str	r3, [sp, #16]
 80035d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d8:	2206      	movs	r2, #6
 80035da:	4825      	ldr	r0, [pc, #148]	@ (8003670 <_svfiprintf_r+0x1ec>)
 80035dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035e0:	f000 f9f6 	bl	80039d0 <memchr>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d036      	beq.n	8003656 <_svfiprintf_r+0x1d2>
 80035e8:	4b22      	ldr	r3, [pc, #136]	@ (8003674 <_svfiprintf_r+0x1f0>)
 80035ea:	bb1b      	cbnz	r3, 8003634 <_svfiprintf_r+0x1b0>
 80035ec:	9b03      	ldr	r3, [sp, #12]
 80035ee:	3307      	adds	r3, #7
 80035f0:	f023 0307 	bic.w	r3, r3, #7
 80035f4:	3308      	adds	r3, #8
 80035f6:	9303      	str	r3, [sp, #12]
 80035f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035fa:	4433      	add	r3, r6
 80035fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80035fe:	e76a      	b.n	80034d6 <_svfiprintf_r+0x52>
 8003600:	460c      	mov	r4, r1
 8003602:	2001      	movs	r0, #1
 8003604:	fb0c 3202 	mla	r2, ip, r2, r3
 8003608:	e7a8      	b.n	800355c <_svfiprintf_r+0xd8>
 800360a:	2300      	movs	r3, #0
 800360c:	f04f 0c0a 	mov.w	ip, #10
 8003610:	4619      	mov	r1, r3
 8003612:	3401      	adds	r4, #1
 8003614:	9305      	str	r3, [sp, #20]
 8003616:	4620      	mov	r0, r4
 8003618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800361c:	3a30      	subs	r2, #48	@ 0x30
 800361e:	2a09      	cmp	r2, #9
 8003620:	d903      	bls.n	800362a <_svfiprintf_r+0x1a6>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0c6      	beq.n	80035b4 <_svfiprintf_r+0x130>
 8003626:	9105      	str	r1, [sp, #20]
 8003628:	e7c4      	b.n	80035b4 <_svfiprintf_r+0x130>
 800362a:	4604      	mov	r4, r0
 800362c:	2301      	movs	r3, #1
 800362e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003632:	e7f0      	b.n	8003616 <_svfiprintf_r+0x192>
 8003634:	ab03      	add	r3, sp, #12
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	462a      	mov	r2, r5
 800363a:	4638      	mov	r0, r7
 800363c:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <_svfiprintf_r+0x1f4>)
 800363e:	a904      	add	r1, sp, #16
 8003640:	f3af 8000 	nop.w
 8003644:	1c42      	adds	r2, r0, #1
 8003646:	4606      	mov	r6, r0
 8003648:	d1d6      	bne.n	80035f8 <_svfiprintf_r+0x174>
 800364a:	89ab      	ldrh	r3, [r5, #12]
 800364c:	065b      	lsls	r3, r3, #25
 800364e:	f53f af2d 	bmi.w	80034ac <_svfiprintf_r+0x28>
 8003652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003654:	e72c      	b.n	80034b0 <_svfiprintf_r+0x2c>
 8003656:	ab03      	add	r3, sp, #12
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	462a      	mov	r2, r5
 800365c:	4638      	mov	r0, r7
 800365e:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <_svfiprintf_r+0x1f4>)
 8003660:	a904      	add	r1, sp, #16
 8003662:	f000 f87d 	bl	8003760 <_printf_i>
 8003666:	e7ed      	b.n	8003644 <_svfiprintf_r+0x1c0>
 8003668:	08003b4e 	.word	0x08003b4e
 800366c:	08003b54 	.word	0x08003b54
 8003670:	08003b58 	.word	0x08003b58
 8003674:	00000000 	.word	0x00000000
 8003678:	080033cd 	.word	0x080033cd

0800367c <_printf_common>:
 800367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003680:	4616      	mov	r6, r2
 8003682:	4698      	mov	r8, r3
 8003684:	688a      	ldr	r2, [r1, #8]
 8003686:	690b      	ldr	r3, [r1, #16]
 8003688:	4607      	mov	r7, r0
 800368a:	4293      	cmp	r3, r2
 800368c:	bfb8      	it	lt
 800368e:	4613      	movlt	r3, r2
 8003690:	6033      	str	r3, [r6, #0]
 8003692:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003696:	460c      	mov	r4, r1
 8003698:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800369c:	b10a      	cbz	r2, 80036a2 <_printf_common+0x26>
 800369e:	3301      	adds	r3, #1
 80036a0:	6033      	str	r3, [r6, #0]
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	0699      	lsls	r1, r3, #26
 80036a6:	bf42      	ittt	mi
 80036a8:	6833      	ldrmi	r3, [r6, #0]
 80036aa:	3302      	addmi	r3, #2
 80036ac:	6033      	strmi	r3, [r6, #0]
 80036ae:	6825      	ldr	r5, [r4, #0]
 80036b0:	f015 0506 	ands.w	r5, r5, #6
 80036b4:	d106      	bne.n	80036c4 <_printf_common+0x48>
 80036b6:	f104 0a19 	add.w	sl, r4, #25
 80036ba:	68e3      	ldr	r3, [r4, #12]
 80036bc:	6832      	ldr	r2, [r6, #0]
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	42ab      	cmp	r3, r5
 80036c2:	dc2b      	bgt.n	800371c <_printf_common+0xa0>
 80036c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036c8:	6822      	ldr	r2, [r4, #0]
 80036ca:	3b00      	subs	r3, #0
 80036cc:	bf18      	it	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	0692      	lsls	r2, r2, #26
 80036d2:	d430      	bmi.n	8003736 <_printf_common+0xba>
 80036d4:	4641      	mov	r1, r8
 80036d6:	4638      	mov	r0, r7
 80036d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036dc:	47c8      	blx	r9
 80036de:	3001      	adds	r0, #1
 80036e0:	d023      	beq.n	800372a <_printf_common+0xae>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	6922      	ldr	r2, [r4, #16]
 80036e6:	f003 0306 	and.w	r3, r3, #6
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	bf14      	ite	ne
 80036ee:	2500      	movne	r5, #0
 80036f0:	6833      	ldreq	r3, [r6, #0]
 80036f2:	f04f 0600 	mov.w	r6, #0
 80036f6:	bf08      	it	eq
 80036f8:	68e5      	ldreq	r5, [r4, #12]
 80036fa:	f104 041a 	add.w	r4, r4, #26
 80036fe:	bf08      	it	eq
 8003700:	1aed      	subeq	r5, r5, r3
 8003702:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003706:	bf08      	it	eq
 8003708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800370c:	4293      	cmp	r3, r2
 800370e:	bfc4      	itt	gt
 8003710:	1a9b      	subgt	r3, r3, r2
 8003712:	18ed      	addgt	r5, r5, r3
 8003714:	42b5      	cmp	r5, r6
 8003716:	d11a      	bne.n	800374e <_printf_common+0xd2>
 8003718:	2000      	movs	r0, #0
 800371a:	e008      	b.n	800372e <_printf_common+0xb2>
 800371c:	2301      	movs	r3, #1
 800371e:	4652      	mov	r2, sl
 8003720:	4641      	mov	r1, r8
 8003722:	4638      	mov	r0, r7
 8003724:	47c8      	blx	r9
 8003726:	3001      	adds	r0, #1
 8003728:	d103      	bne.n	8003732 <_printf_common+0xb6>
 800372a:	f04f 30ff 	mov.w	r0, #4294967295
 800372e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003732:	3501      	adds	r5, #1
 8003734:	e7c1      	b.n	80036ba <_printf_common+0x3e>
 8003736:	2030      	movs	r0, #48	@ 0x30
 8003738:	18e1      	adds	r1, r4, r3
 800373a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003744:	4422      	add	r2, r4
 8003746:	3302      	adds	r3, #2
 8003748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800374c:	e7c2      	b.n	80036d4 <_printf_common+0x58>
 800374e:	2301      	movs	r3, #1
 8003750:	4622      	mov	r2, r4
 8003752:	4641      	mov	r1, r8
 8003754:	4638      	mov	r0, r7
 8003756:	47c8      	blx	r9
 8003758:	3001      	adds	r0, #1
 800375a:	d0e6      	beq.n	800372a <_printf_common+0xae>
 800375c:	3601      	adds	r6, #1
 800375e:	e7d9      	b.n	8003714 <_printf_common+0x98>

08003760 <_printf_i>:
 8003760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003764:	7e0f      	ldrb	r7, [r1, #24]
 8003766:	4691      	mov	r9, r2
 8003768:	2f78      	cmp	r7, #120	@ 0x78
 800376a:	4680      	mov	r8, r0
 800376c:	460c      	mov	r4, r1
 800376e:	469a      	mov	sl, r3
 8003770:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003772:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003776:	d807      	bhi.n	8003788 <_printf_i+0x28>
 8003778:	2f62      	cmp	r7, #98	@ 0x62
 800377a:	d80a      	bhi.n	8003792 <_printf_i+0x32>
 800377c:	2f00      	cmp	r7, #0
 800377e:	f000 80d1 	beq.w	8003924 <_printf_i+0x1c4>
 8003782:	2f58      	cmp	r7, #88	@ 0x58
 8003784:	f000 80b8 	beq.w	80038f8 <_printf_i+0x198>
 8003788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800378c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003790:	e03a      	b.n	8003808 <_printf_i+0xa8>
 8003792:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003796:	2b15      	cmp	r3, #21
 8003798:	d8f6      	bhi.n	8003788 <_printf_i+0x28>
 800379a:	a101      	add	r1, pc, #4	@ (adr r1, 80037a0 <_printf_i+0x40>)
 800379c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037a0:	080037f9 	.word	0x080037f9
 80037a4:	0800380d 	.word	0x0800380d
 80037a8:	08003789 	.word	0x08003789
 80037ac:	08003789 	.word	0x08003789
 80037b0:	08003789 	.word	0x08003789
 80037b4:	08003789 	.word	0x08003789
 80037b8:	0800380d 	.word	0x0800380d
 80037bc:	08003789 	.word	0x08003789
 80037c0:	08003789 	.word	0x08003789
 80037c4:	08003789 	.word	0x08003789
 80037c8:	08003789 	.word	0x08003789
 80037cc:	0800390b 	.word	0x0800390b
 80037d0:	08003837 	.word	0x08003837
 80037d4:	080038c5 	.word	0x080038c5
 80037d8:	08003789 	.word	0x08003789
 80037dc:	08003789 	.word	0x08003789
 80037e0:	0800392d 	.word	0x0800392d
 80037e4:	08003789 	.word	0x08003789
 80037e8:	08003837 	.word	0x08003837
 80037ec:	08003789 	.word	0x08003789
 80037f0:	08003789 	.word	0x08003789
 80037f4:	080038cd 	.word	0x080038cd
 80037f8:	6833      	ldr	r3, [r6, #0]
 80037fa:	1d1a      	adds	r2, r3, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6032      	str	r2, [r6, #0]
 8003800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003804:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003808:	2301      	movs	r3, #1
 800380a:	e09c      	b.n	8003946 <_printf_i+0x1e6>
 800380c:	6833      	ldr	r3, [r6, #0]
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	1d19      	adds	r1, r3, #4
 8003812:	6031      	str	r1, [r6, #0]
 8003814:	0606      	lsls	r6, r0, #24
 8003816:	d501      	bpl.n	800381c <_printf_i+0xbc>
 8003818:	681d      	ldr	r5, [r3, #0]
 800381a:	e003      	b.n	8003824 <_printf_i+0xc4>
 800381c:	0645      	lsls	r5, r0, #25
 800381e:	d5fb      	bpl.n	8003818 <_printf_i+0xb8>
 8003820:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003824:	2d00      	cmp	r5, #0
 8003826:	da03      	bge.n	8003830 <_printf_i+0xd0>
 8003828:	232d      	movs	r3, #45	@ 0x2d
 800382a:	426d      	negs	r5, r5
 800382c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003830:	230a      	movs	r3, #10
 8003832:	4858      	ldr	r0, [pc, #352]	@ (8003994 <_printf_i+0x234>)
 8003834:	e011      	b.n	800385a <_printf_i+0xfa>
 8003836:	6821      	ldr	r1, [r4, #0]
 8003838:	6833      	ldr	r3, [r6, #0]
 800383a:	0608      	lsls	r0, r1, #24
 800383c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003840:	d402      	bmi.n	8003848 <_printf_i+0xe8>
 8003842:	0649      	lsls	r1, r1, #25
 8003844:	bf48      	it	mi
 8003846:	b2ad      	uxthmi	r5, r5
 8003848:	2f6f      	cmp	r7, #111	@ 0x6f
 800384a:	6033      	str	r3, [r6, #0]
 800384c:	bf14      	ite	ne
 800384e:	230a      	movne	r3, #10
 8003850:	2308      	moveq	r3, #8
 8003852:	4850      	ldr	r0, [pc, #320]	@ (8003994 <_printf_i+0x234>)
 8003854:	2100      	movs	r1, #0
 8003856:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800385a:	6866      	ldr	r6, [r4, #4]
 800385c:	2e00      	cmp	r6, #0
 800385e:	60a6      	str	r6, [r4, #8]
 8003860:	db05      	blt.n	800386e <_printf_i+0x10e>
 8003862:	6821      	ldr	r1, [r4, #0]
 8003864:	432e      	orrs	r6, r5
 8003866:	f021 0104 	bic.w	r1, r1, #4
 800386a:	6021      	str	r1, [r4, #0]
 800386c:	d04b      	beq.n	8003906 <_printf_i+0x1a6>
 800386e:	4616      	mov	r6, r2
 8003870:	fbb5 f1f3 	udiv	r1, r5, r3
 8003874:	fb03 5711 	mls	r7, r3, r1, r5
 8003878:	5dc7      	ldrb	r7, [r0, r7]
 800387a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800387e:	462f      	mov	r7, r5
 8003880:	42bb      	cmp	r3, r7
 8003882:	460d      	mov	r5, r1
 8003884:	d9f4      	bls.n	8003870 <_printf_i+0x110>
 8003886:	2b08      	cmp	r3, #8
 8003888:	d10b      	bne.n	80038a2 <_printf_i+0x142>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	07df      	lsls	r7, r3, #31
 800388e:	d508      	bpl.n	80038a2 <_printf_i+0x142>
 8003890:	6923      	ldr	r3, [r4, #16]
 8003892:	6861      	ldr	r1, [r4, #4]
 8003894:	4299      	cmp	r1, r3
 8003896:	bfde      	ittt	le
 8003898:	2330      	movle	r3, #48	@ 0x30
 800389a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800389e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038a2:	1b92      	subs	r2, r2, r6
 80038a4:	6122      	str	r2, [r4, #16]
 80038a6:	464b      	mov	r3, r9
 80038a8:	4621      	mov	r1, r4
 80038aa:	4640      	mov	r0, r8
 80038ac:	f8cd a000 	str.w	sl, [sp]
 80038b0:	aa03      	add	r2, sp, #12
 80038b2:	f7ff fee3 	bl	800367c <_printf_common>
 80038b6:	3001      	adds	r0, #1
 80038b8:	d14a      	bne.n	8003950 <_printf_i+0x1f0>
 80038ba:	f04f 30ff 	mov.w	r0, #4294967295
 80038be:	b004      	add	sp, #16
 80038c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f043 0320 	orr.w	r3, r3, #32
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	2778      	movs	r7, #120	@ 0x78
 80038ce:	4832      	ldr	r0, [pc, #200]	@ (8003998 <_printf_i+0x238>)
 80038d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	6831      	ldr	r1, [r6, #0]
 80038d8:	061f      	lsls	r7, r3, #24
 80038da:	f851 5b04 	ldr.w	r5, [r1], #4
 80038de:	d402      	bmi.n	80038e6 <_printf_i+0x186>
 80038e0:	065f      	lsls	r7, r3, #25
 80038e2:	bf48      	it	mi
 80038e4:	b2ad      	uxthmi	r5, r5
 80038e6:	6031      	str	r1, [r6, #0]
 80038e8:	07d9      	lsls	r1, r3, #31
 80038ea:	bf44      	itt	mi
 80038ec:	f043 0320 	orrmi.w	r3, r3, #32
 80038f0:	6023      	strmi	r3, [r4, #0]
 80038f2:	b11d      	cbz	r5, 80038fc <_printf_i+0x19c>
 80038f4:	2310      	movs	r3, #16
 80038f6:	e7ad      	b.n	8003854 <_printf_i+0xf4>
 80038f8:	4826      	ldr	r0, [pc, #152]	@ (8003994 <_printf_i+0x234>)
 80038fa:	e7e9      	b.n	80038d0 <_printf_i+0x170>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	f023 0320 	bic.w	r3, r3, #32
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	e7f6      	b.n	80038f4 <_printf_i+0x194>
 8003906:	4616      	mov	r6, r2
 8003908:	e7bd      	b.n	8003886 <_printf_i+0x126>
 800390a:	6833      	ldr	r3, [r6, #0]
 800390c:	6825      	ldr	r5, [r4, #0]
 800390e:	1d18      	adds	r0, r3, #4
 8003910:	6961      	ldr	r1, [r4, #20]
 8003912:	6030      	str	r0, [r6, #0]
 8003914:	062e      	lsls	r6, r5, #24
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	d501      	bpl.n	800391e <_printf_i+0x1be>
 800391a:	6019      	str	r1, [r3, #0]
 800391c:	e002      	b.n	8003924 <_printf_i+0x1c4>
 800391e:	0668      	lsls	r0, r5, #25
 8003920:	d5fb      	bpl.n	800391a <_printf_i+0x1ba>
 8003922:	8019      	strh	r1, [r3, #0]
 8003924:	2300      	movs	r3, #0
 8003926:	4616      	mov	r6, r2
 8003928:	6123      	str	r3, [r4, #16]
 800392a:	e7bc      	b.n	80038a6 <_printf_i+0x146>
 800392c:	6833      	ldr	r3, [r6, #0]
 800392e:	2100      	movs	r1, #0
 8003930:	1d1a      	adds	r2, r3, #4
 8003932:	6032      	str	r2, [r6, #0]
 8003934:	681e      	ldr	r6, [r3, #0]
 8003936:	6862      	ldr	r2, [r4, #4]
 8003938:	4630      	mov	r0, r6
 800393a:	f000 f849 	bl	80039d0 <memchr>
 800393e:	b108      	cbz	r0, 8003944 <_printf_i+0x1e4>
 8003940:	1b80      	subs	r0, r0, r6
 8003942:	6060      	str	r0, [r4, #4]
 8003944:	6863      	ldr	r3, [r4, #4]
 8003946:	6123      	str	r3, [r4, #16]
 8003948:	2300      	movs	r3, #0
 800394a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800394e:	e7aa      	b.n	80038a6 <_printf_i+0x146>
 8003950:	4632      	mov	r2, r6
 8003952:	4649      	mov	r1, r9
 8003954:	4640      	mov	r0, r8
 8003956:	6923      	ldr	r3, [r4, #16]
 8003958:	47d0      	blx	sl
 800395a:	3001      	adds	r0, #1
 800395c:	d0ad      	beq.n	80038ba <_printf_i+0x15a>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	079b      	lsls	r3, r3, #30
 8003962:	d413      	bmi.n	800398c <_printf_i+0x22c>
 8003964:	68e0      	ldr	r0, [r4, #12]
 8003966:	9b03      	ldr	r3, [sp, #12]
 8003968:	4298      	cmp	r0, r3
 800396a:	bfb8      	it	lt
 800396c:	4618      	movlt	r0, r3
 800396e:	e7a6      	b.n	80038be <_printf_i+0x15e>
 8003970:	2301      	movs	r3, #1
 8003972:	4632      	mov	r2, r6
 8003974:	4649      	mov	r1, r9
 8003976:	4640      	mov	r0, r8
 8003978:	47d0      	blx	sl
 800397a:	3001      	adds	r0, #1
 800397c:	d09d      	beq.n	80038ba <_printf_i+0x15a>
 800397e:	3501      	adds	r5, #1
 8003980:	68e3      	ldr	r3, [r4, #12]
 8003982:	9903      	ldr	r1, [sp, #12]
 8003984:	1a5b      	subs	r3, r3, r1
 8003986:	42ab      	cmp	r3, r5
 8003988:	dcf2      	bgt.n	8003970 <_printf_i+0x210>
 800398a:	e7eb      	b.n	8003964 <_printf_i+0x204>
 800398c:	2500      	movs	r5, #0
 800398e:	f104 0619 	add.w	r6, r4, #25
 8003992:	e7f5      	b.n	8003980 <_printf_i+0x220>
 8003994:	08003b5f 	.word	0x08003b5f
 8003998:	08003b70 	.word	0x08003b70

0800399c <memmove>:
 800399c:	4288      	cmp	r0, r1
 800399e:	b510      	push	{r4, lr}
 80039a0:	eb01 0402 	add.w	r4, r1, r2
 80039a4:	d902      	bls.n	80039ac <memmove+0x10>
 80039a6:	4284      	cmp	r4, r0
 80039a8:	4623      	mov	r3, r4
 80039aa:	d807      	bhi.n	80039bc <memmove+0x20>
 80039ac:	1e43      	subs	r3, r0, #1
 80039ae:	42a1      	cmp	r1, r4
 80039b0:	d008      	beq.n	80039c4 <memmove+0x28>
 80039b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039ba:	e7f8      	b.n	80039ae <memmove+0x12>
 80039bc:	4601      	mov	r1, r0
 80039be:	4402      	add	r2, r0
 80039c0:	428a      	cmp	r2, r1
 80039c2:	d100      	bne.n	80039c6 <memmove+0x2a>
 80039c4:	bd10      	pop	{r4, pc}
 80039c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ce:	e7f7      	b.n	80039c0 <memmove+0x24>

080039d0 <memchr>:
 80039d0:	4603      	mov	r3, r0
 80039d2:	b510      	push	{r4, lr}
 80039d4:	b2c9      	uxtb	r1, r1
 80039d6:	4402      	add	r2, r0
 80039d8:	4293      	cmp	r3, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	d101      	bne.n	80039e2 <memchr+0x12>
 80039de:	2000      	movs	r0, #0
 80039e0:	e003      	b.n	80039ea <memchr+0x1a>
 80039e2:	7804      	ldrb	r4, [r0, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	428c      	cmp	r4, r1
 80039e8:	d1f6      	bne.n	80039d8 <memchr+0x8>
 80039ea:	bd10      	pop	{r4, pc}

080039ec <memcpy>:
 80039ec:	440a      	add	r2, r1
 80039ee:	4291      	cmp	r1, r2
 80039f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039f4:	d100      	bne.n	80039f8 <memcpy+0xc>
 80039f6:	4770      	bx	lr
 80039f8:	b510      	push	{r4, lr}
 80039fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039fe:	4291      	cmp	r1, r2
 8003a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a04:	d1f9      	bne.n	80039fa <memcpy+0xe>
 8003a06:	bd10      	pop	{r4, pc}

08003a08 <_realloc_r>:
 8003a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0c:	4607      	mov	r7, r0
 8003a0e:	4614      	mov	r4, r2
 8003a10:	460d      	mov	r5, r1
 8003a12:	b921      	cbnz	r1, 8003a1e <_realloc_r+0x16>
 8003a14:	4611      	mov	r1, r2
 8003a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1a:	f7ff bb9d 	b.w	8003158 <_malloc_r>
 8003a1e:	b92a      	cbnz	r2, 8003a2c <_realloc_r+0x24>
 8003a20:	f7ff fc8c 	bl	800333c <_free_r>
 8003a24:	4625      	mov	r5, r4
 8003a26:	4628      	mov	r0, r5
 8003a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a2c:	f000 f81a 	bl	8003a64 <_malloc_usable_size_r>
 8003a30:	4284      	cmp	r4, r0
 8003a32:	4606      	mov	r6, r0
 8003a34:	d802      	bhi.n	8003a3c <_realloc_r+0x34>
 8003a36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a3a:	d8f4      	bhi.n	8003a26 <_realloc_r+0x1e>
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	4638      	mov	r0, r7
 8003a40:	f7ff fb8a 	bl	8003158 <_malloc_r>
 8003a44:	4680      	mov	r8, r0
 8003a46:	b908      	cbnz	r0, 8003a4c <_realloc_r+0x44>
 8003a48:	4645      	mov	r5, r8
 8003a4a:	e7ec      	b.n	8003a26 <_realloc_r+0x1e>
 8003a4c:	42b4      	cmp	r4, r6
 8003a4e:	4622      	mov	r2, r4
 8003a50:	4629      	mov	r1, r5
 8003a52:	bf28      	it	cs
 8003a54:	4632      	movcs	r2, r6
 8003a56:	f7ff ffc9 	bl	80039ec <memcpy>
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f7ff fc6d 	bl	800333c <_free_r>
 8003a62:	e7f1      	b.n	8003a48 <_realloc_r+0x40>

08003a64 <_malloc_usable_size_r>:
 8003a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a68:	1f18      	subs	r0, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	bfbc      	itt	lt
 8003a6e:	580b      	ldrlt	r3, [r1, r0]
 8003a70:	18c0      	addlt	r0, r0, r3
 8003a72:	4770      	bx	lr

08003a74 <_init>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	bf00      	nop
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr

08003a80 <_fini>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	bf00      	nop
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr
